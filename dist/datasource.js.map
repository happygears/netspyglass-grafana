{"version":3,"sources":["../src/datasource.js"],"names":["_","NetSpyGlassDatasource","result","map","data","d","i","text","value","tagMatches","tags","idx","length","tm","tt","tagOperation","tagFacet","tagWord","push","join","instanceSettings","$q","backendSrv","templateSrv","type","url","name","networkId","jsonData","accessToken","useToken","undefined","endpointsBase","endpoints","category","variable","query","test","blankDropDownElement","blankValues","alias","device","component","description","sortByEl","selector","limit","group","interval","tagData","format","columns","unique","refId","clearString","endpoint","method","datasourceRequest","headers","options","self","buildQueryFromQueryDialogData","aliases","targets","targetDlg","target","JSON","stringify","replace","scopedVars","response","_apiCall","then","series","datapoints","id","getSeriesName","regex","match","g1","g2","segIndex","parseInt","indexOf","tag","status","message","title","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","interpolated","err","reject","buildQueryFromText","mapToTextText","mapToTextValue","buildQuery","index","clonedOptions","jQuery","extend","facet","queryObject","updatedTarget","replaceTemplateVars","field","item","temp","key","filter","isBlankTagMatch","t","parse","templateSrvParameters","hide","removeBlanks","transformTagMatch","from","until","to","groupByTime"],"mappings":"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","file":"datasource.js","sourcesContent":["/*\n * Copyright (c) 2016.  Happy Gears, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport _ from \"lodash\";\n\n\nexport class NetSpyGlassDatasource {\n\n    static mapToTextValue(result) {\n        return _.map(result.data, (d, i) => {\n            return {text: d, value: i};\n        });\n    }\n\n    static mapToTextText(result) {\n        return _.map(result.data, (d, i) => {\n            return {text: d, value: d};\n        });\n    }\n\n    /**\n     * we get tag matches from the dialog in the form\n     *\n     * [{\"tagFacet\":\"Explicit\",\"tagWord\":\"core\",\"tagOperation\":\"==\"}, {\"tagFacet\":\"Vendor\",\"tagWord\":\"Cisco\",\"tagOperation\":\"<>\"}]\n     *\n     * transform this to\n     *\n     * \"Explicit.core, !Vendor.Cisco\"\n     *\n     */\n    static transformTagMatch(tagMatches) {\n        var tags = [];\n        var idx;\n        for (idx = 0; idx < tagMatches.length; idx++) {\n            var tm = tagMatches[idx];\n            var tt = ((tm.tagOperation === '<>') ? '!' : '') + tm.tagFacet + ((tm.tagWord !== '') ? ('.' + tm.tagWord) : '');\n            tags.push(tt);\n        }\n        return tags.join(',');\n    }\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.$q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.networkId = instanceSettings.jsonData.networkId || 1;\n        this.accessToken = (instanceSettings.jsonData.useToken !== false && instanceSettings.jsonData.accessToken !== undefined && instanceSettings.jsonData.accessToken !== '') ? '?access_token=' + instanceSettings.jsonData.accessToken : '';\n        this.endpointsBase = '/v2/query/net/' + this.networkId;\n        this.endpoints = {};\n        this.endpoints.category = this.endpointsBase + '/categories/' + this.accessToken;\n        this.endpoints.variable = this.endpointsBase + '/variables/';\n        this.endpoints.query = this.endpointsBase + '/data/' + this.accessToken;\n        this.endpoints.test = '/v2/ping/net/' + this.networkId + \"/test/\" + this.accessToken;\n\n        this.blankDropDownElement = '---';\n\n        this.blankValues = {};\n        this.blankValues.alias = '';\n        this.blankValues.variable = 'select variable';\n        this.blankValues.device = 'select device';\n        this.blankValues.component = 'select component';\n        this.blankValues.description = '';\n        this.blankValues.sortByEl = 'select sorting';\n        this.blankValues.selector = 'choose selector';\n        this.blankValues.limit = 'select limit';\n        this.blankValues.group = 'select group';\n        this.blankValues.tagFacet = this.blankDropDownElement;\n        this.blankValues.tagWord = this.blankDropDownElement;\n        this.blankValues.interval = 'select interval';\n        this.blankValues.tagData = [];\n        this.blankValues.format = '';\n        this.blankValues.columns = '';\n        this.blankValues.unique = '';\n        this.blankValues.refId = '';\n\n        this.clearString = '-- clear selection --';\n    }\n\n    /**\n     * makes actual API call to NetSpyGlass server\n     *\n     * @param endpoint   API call endpoint\n     * @param method     GET or POST\n     * @param query      query object\n     * @returns {*}\n     * @private\n     */\n    _apiCall(endpoint, method, query) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + endpoint,\n            data: query,\n            method: method,\n            headers: {'Content-Type': 'application/json'}\n        });\n    }\n\n    /**\n     * this function is called when plugin builds a graph\n     *\n     * @param options   an object built from the data entered in the query dialog\n     * @returns {*}\n     */\n    query(options) {\n        var self = this;\n        var data = this.buildQueryFromQueryDialogData(options);\n        var aliases = {};\n        for (var idx = 0; idx < options.targets.length; idx++) {\n            var targetDlg = options.targets[idx];\n            aliases[targetDlg.refId] = targetDlg.alias;\n        }\n        for (var i = 0; i < data.targets.length; i++) {\n            var target = data.targets[i];\n            // UI passes only sort order (\"ascending\",\"descending\" or \"none\"). Prepend it with default column name\n            target.sortByEl = (target.sortByEl !== 'none') ? 'metric:' + target.sortByEl : target.sortByEl;\n        }\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        var response = this._apiCall(this.endpoints.query, 'POST', query);\n        // then: function(a,b,c)\n        return response.then( response => {\n            var data = response.data;\n            if (!data) return response;\n\n            // data is an Array of these:\n            //\n            // component:  \"eth0\"\n            // datapoints: Array[121]\n            // device:     \"synas1\"\n            // target:     \"ifInRate:synas1:eth0\"\n            // variable:   \"ifInRate\"\n\n            for (idx = 0; idx < data.length; idx++) {\n                var series = data[idx];\n                if (!series || !series.datapoints || !series.target) continue;\n                var alias = aliases[series.id];\n                if (alias) series.target = self.getSeriesName(series, alias);\n            }\n\n            return response;\n        });\n    }\n\n    getSeriesName(series, alias) {\n        var regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\n\n        return alias.replace(regex, function(match, g1, g2) {\n            var group = g1 || g2;\n            var segIndex = parseInt(group, 10);\n\n            if (group === 'm' || group === 'measurement') { return series.variable; }\n            if (group === 'variable') { return series.variable; }\n            if (group === 'device') return series.device;\n            if (group === 'component') return series.component;\n            if (group === 'description') return series.description;\n            if (group.indexOf('tag_') !== 0) { return match; }\n\n            var tag = group.replace('tag_', '');\n            if (!series.tags) { return match; }\n            return series.tags[tag];\n        });\n    };\n\n    // Required\n    // Used for testing datasource in datasource configuration page\n    testDatasource() {\n        var endpoint = this.endpoints.test;\n        return this.backendSrv.datasourceRequest({\n            url: this.url + endpoint,\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n            }\n        });\n    }\n\n    annotationQuery(options) {\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n        var annotationQuery = {\n            range: options.range,\n            annotation: {\n                name: options.annotation.name,\n                datasource: options.annotation.datasource,\n                enable: options.annotation.enable,\n                iconColor: options.annotation.iconColor,\n                query: query\n            },\n            rangeRaw: options.rangeRaw\n        };\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/annotations' + this.accessToken,\n            method: 'POST',\n            data: annotationQuery\n        }).then(result => {\n            return result.data;\n        });\n    }\n\n    /**\n     * generic query. Grafana calls this function when it needs to get list of values for a dashboard\n     * template variable.\n     *\n     * User enters query in JSON Format, e.g.\n     *\n     * {\"variable\":\"cpuUtil\",\"columns\":\"device\"}\n     *\n     * User is responsible for setting value of the \"columns\" to what they want to receive back. This can be\n     * \"device\", \"component\" or tag facet\n     *\n     * This function forces request type=table even if user specified something else.\n     *\n     * Server returns data in the following format:\n     *\n     * [ {\n     *   \"columns\" : [ { \"text\" : \"device\" } ],\n     *   \"rows\" : [ [ \"synas1\" ], [ \"ex2200\" ] ],\n     *   \"type\" : \"table\"\n     * } ]\n     *\n     * \"rows\" is a list of lists because normally this query can return multiple columns.\n     * For the purpose of dashboard template we use only the first column if request specified multiple.\n     *\n     * @param query     query object as text string\n     * @returns {Promise.<TResult>}\n     */\n    metricFindQuery(query) {\n        var interpolated;\n        try {\n            interpolated = this.templateSrv.replace(query, query.scopedVars);\n        } catch (err) {\n            return this.$q.reject(err);\n        }\n        var data = this.buildQueryFromText(interpolated);\n        var target = data.targets[0];\n        target.format = 'list';\n        return this._apiCall(this.endpoints.query, 'POST', JSON.stringify(data)).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    findCategoriesQuery() {\n        return this._apiCall(this.endpoints.category, 'POST', '').then(NetSpyGlassDatasource.mapToTextValue);\n    }\n\n    findVariablesQuery(options) {\n        var endpoint = this.endpoints.variable + options.category + this.accessToken;\n        return this._apiCall(endpoint, 'POST', '').then(NetSpyGlassDatasource.mapToTextValue);\n    }\n\n    findDevices(options) {\n        var data = this.buildQuery(options);\n        var target = data.targets[0];\n        target.device = '';  // erase to ignore current selection in the dialog\n        target.component = '';\n        target.columns = 'device';\n        target.unique = 'device';\n        target.sortByEl = 'device:ascending';\n        target.format = 'list';\n        target.limit = -1;\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        return this._apiCall(this.endpoints.query, 'POST', query).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    findComponents(options) {\n        var data = this.buildQuery(options);\n        var target = data.targets[0];\n        target.component = '';  // erase to ignore current selection in the dialog\n        target.columns = 'component';\n        target.unique = 'component';\n        target.sortByEl = 'component:ascending';\n        target.format = 'list';\n        target.limit = -1;\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        return this._apiCall(this.endpoints.query, 'POST', query).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    findTagFacets(options, index) {\n        var clonedOptions = jQuery.extend(true, {}, options);\n        clonedOptions.tagData[index].tagFacet = '';\n        clonedOptions.tagData[index].tagWord = '';\n        var data = this.buildQuery(clonedOptions);\n        var target = data.targets[0];\n        target.columns = 'tagFacet';\n        target.unique = 'tagFacet';\n        target.sortByEl = 'tagFacet:ascending';\n        target.format = 'list';\n        target.limit = -1;\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        return this._apiCall(this.endpoints.query, 'POST', query).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    findTagWordsQuery(options, index) {\n        var clonedOptions = jQuery.extend(true, {}, options);\n        var facet = clonedOptions.tagData[index].tagFacet;\n        clonedOptions.tagData[index].tagWord = '';\n        var data = this.buildQuery(clonedOptions);\n        var target = data.targets[0];\n        target.columns = facet;\n        target.unique = facet;\n        target.sortByEl = facet + ':ascending';\n        target.format = 'list';\n        target.limit = -1;\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        return this._apiCall(this.endpoints.query, 'POST', query).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    /**\n     * when building graphing query, this function is called with JS object that has at least\n     * attribute 'targets'\n     *\n     * This must include all fields we support in queries, both constructed from the query dialog\n     * (where each field corresponds to the input element in the dialog) and from the input field in\n     * the dashboard templates where user enters query as json.\n     *\n     * field \"description\" is allowed in dashboard template query but does not have corresponding\n     * input field in the query dialog at this time.\n     */\n    templateSrvParameters(queryObject) {\n        queryObject.targets = _.map(queryObject.targets, target => {\n            var updatedTarget = jQuery.extend(true, {}, target);\n            updatedTarget.category = this.replaceTemplateVars(updatedTarget.category);\n            updatedTarget.device = this.replaceTemplateVars(updatedTarget.device);\n            updatedTarget.component = this.replaceTemplateVars(updatedTarget.component);\n            updatedTarget.description = this.replaceTemplateVars(updatedTarget.description);\n            updatedTarget.limit = (updatedTarget.limit === '') ? -1 : updatedTarget.limit;\n            // target.alias = this.replaceTemplateVars(target.alias);\n            return updatedTarget;\n        });\n        return queryObject;\n    }\n\n    replaceTemplateVars(field) {\n        if (typeof field !== 'undefined') return this.templateSrv.replace(field);\n        return field;\n    }\n\n    removeBlanks(item) {\n        var temp = {};\n        for (var key in item) {\n            if (!(key in this.blankValues)) {\n                continue;\n            }\n            if (typeof item[key] == 'undefined' || item[key] == this.clearString || item[key] == this.blankValues[key]) {\n                continue;\n            }\n            if (key == 'tagFacet' || key == 'tagWord') {\n                continue;\n            }\n            if (key == 'tagData') {\n                temp[key] = item[key].filter(t => !this.isBlankTagMatch(t));\n            } else {\n                temp[key] = item[key];\n            }\n        }\n        return temp;\n    }\n\n    isBlankTagMatch(tm) {\n        if (tm.tagFacet === \"\" || tm.tagFacet === this.blankDropDownElement) return true;\n        return !!(tm.tagWord === \"\" || tm.tagWord === this.blankDropDownElement);\n    }\n\n    /**\n     * build query object from an object that represents single query target. This\n     * is called to get items for drop-down lists in the graph or table panel query dialog.\n     */\n    buildQuery(options) {\n        var queryObject = {\n            targets: [ options ]\n        };\n        return this.buildQueryFromQueryDialogData(queryObject);\n    }\n\n    /**\n     * this function is called when we need to build query object from\n     * query entered as text string (e.g. in dashboard template dialog)\n     */\n    buildQueryFromText(options) {\n        var queryObject = {\n            targets: [ JSON.parse(options) ]\n        };\n        return this.buildQueryFromQueryDialogData(queryObject);\n    }\n\n    /**\n     * build query object from query dialog that can have multiple targets. This\n     * is used when plugin builds query for the graph or table panel\n     */\n    buildQueryFromQueryDialogData(query) {\n        this.templateSrvParameters(query);\n        query.targets = query.targets.filter(t => !t.hide);\n        var queryObject = {\n            targets: []\n        };\n        var index;\n        for (index = query.targets.length - 1; index >= 0; --index) {\n            var target = this.removeBlanks(query.targets[index]);\n            if (typeof target.tagData !== 'undefined') {\n                target.tags = NetSpyGlassDatasource.transformTagMatch(target.tagData);\n            }\n            delete target.tagData;\n            delete target.alias;\n            target.id = target.refId;\n            delete target.refId;\n            queryObject.targets.push(target);\n        }\n        if (typeof query.rangeRaw != 'undefined') {\n            queryObject.from = query.rangeRaw.from;\n            queryObject.until = query.rangeRaw.to;\n            queryObject.groupByTime = query.interval;\n        }\n        // queryObject.scopedVars = '$variable';\n        return queryObject;\n    }\n\n}"]}