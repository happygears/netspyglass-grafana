{"version":3,"sources":["../src/datasource.js"],"names":["_","dateMath","NSGQLApi","SQLGenerator","QueryPrompts","utils","QueryTableNames","DEVICES","NetSpyGlassDatasource","instanceSettings","$q","backendSrv","templateSrv","$timeout","jsonData","networkId","accessToken","url","options","baseUrl","token","endpoints","data","test","api","timeRange","from","getTime","rangeRaw","to","sqlTargets","targets","map","item","generateTarget","generateSQLQuery","format","filter","nsgql","length","resolve","queryData","then","list","ping","query","categories","FORMAT_JSON","groupBy","rows","variable","facets","FORMAT_LIST","type","suggestion","tags"],"mappings":";;;;;;;;;;;;;;;AAgBOA,a;;AACKC,oB;;AACJC,oB,gBAAAA,Q;AAAUC,wB,gBAAAA,Y;;AACVC,wB,eAAAA,Y;;AACDC,iB;;;;;;;;;;;;;;;;;;;;;AAEDC,2B,GAAkB;AACpBC,yBAAS;AADW,a;;6CAWXC,qB;AACT;;;;;;AAMA,+CAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2DC,QAA3D,EAAqE;AAAA;;AAAA,gDAChCJ,iBAAiBK,QADe;AAAA,wBAC1DC,SAD0D,yBAC1DA,SAD0D;AAAA,wBAC/CC,WAD+C,yBAC/CA,WAD+C;AAAA,wBAE1DC,GAF0D,GAEnDR,gBAFmD,CAE1DQ,GAF0D;;;AAIjE;AACA,wBAAMC,UAAU;AACZC,iCAAYF,GAAZ,QADY;AAEZG,+BAAOJ,eAAe,KAFV;AAGZK,mCAAW;AACPC,kDAAoBP,SAApB,UADO;AAEPQ,iDAAmBR,SAAnB;AAFO;AAHC,qBAAhB;;AASA,yBAAKS,GAAL,GAAW,IAAItB,QAAJ,CAAaS,UAAb,EAAyBD,EAAzB,EAA6BQ,OAA7B,CAAX;AACA,yBAAKR,EAAL,GAAUA,EAAV;AACA,yBAAKG,QAAL,GAAgBA,QAAhB;AACH;;AAED;;;;;;;;;0CAKMK,O,EAAS;AAAA;;AACX,4BAAMO,YAAY;AACdC,kCAAMrB,MAAMsB,OAAN,CAAcT,QAAQU,QAAR,CAAiBF,IAA/B,EAAqC,KAArC,CADQ;AAEdG,gCAAIxB,MAAMsB,OAAN,CAAcT,QAAQU,QAAR,CAAiBC,EAA/B,EAAmC,IAAnC;AAFU,yBAAlB;;AAKA,4BAAMC,aAAaZ,QAAQa,OAAR,CACdC,GADc,CACV,UAACC,IAAD;AAAA,mCAAU,MAAKT,GAAL,CAASU,cAAT,CAAwB/B,aAAagC,gBAAb,CAA8BF,IAA9B,EAAoC,EAACR,oBAAD,EAApC,CAAxB,EAA0EQ,KAAKG,MAA/E,CAAV;AAAA,yBADU,EAEdC,MAFc,CAEP,UAACJ,IAAD;AAAA,mCAAUA,KAAKK,KAAL,KAAe,KAAzB;AAAA,yBAFO,CAAnB;;AAIA,4BAAIR,WAAWS,MAAX,KAAsB,CAA1B,EAA6B;AACzB,mCAAO,KAAK7B,EAAL,CAAQ8B,OAAR,CAAgB,EAAClB,MAAM,EAAP,EAAhB,CAAP;AACH;;AAED,+BAAO,KAAKE,GAAL,CAASiB,SAAT,CAAmBX,UAAnB,EAA+BY,IAA/B,CAAoC,UAACC,IAAD;AAAA,mCAAW,EAACrB,MAAMqB,IAAP,EAAX;AAAA,yBAApC,CAAP;AACH;;;qDAKgB;AACb,+BAAO,KAAKnB,GAAL,CAASoB,IAAT,EAAP;AACH;;;oDAKe;AACZ,4BAAMC,QAAQ1C,aAAa2C,UAAb,EAAd;AACA,+BAAO,KAAKtB,GAAL,CACFiB,SADE,CACQI,KADR,EACe3C,SAAS6C,WADxB,EACqC,kBADrC,EAEFL,IAFE,CAEG,UAACpB,IAAD;AAAA,mCAAUtB,EAAEgD,OAAF,CAAU1B,KAAK,CAAL,EAAQ2B,IAAlB,EAAwB,UAAxB,CAAV;AAAA,yBAFH,CAAP;AAGH;;;8CAMSC,Q,EAAU;AAChB,4BAAML,QAAQ1C,aAAagD,MAAb,CAAoBD,QAApB,CAAd;AACA,+BAAO,KAAK1B,GAAL,CAASiB,SAAT,CAAmBI,KAAnB,EAA0B3C,SAASkD,WAAnC,mBAA+DF,QAA/D,CAAP;AACH;;;mDAKc5B,I,EAAM;AACjB,4BAAIuB,cAAJ;;AAEA,gCAAQvB,KAAK+B,IAAb;AACI,iCAAK,QAAL;AACA,iCAAK,WAAL;AACIR,wCAAQ1C,aAAamD,UAAb,CAAwBhC,KAAK+B,IAA7B,EAAmC/B,KAAK4B,QAAxC,EAAkD5B,KAAKiC,IAAvD,CAAR;AACA;AACJ;AACIV,wCAAQ1C,aAAamD,UAAb,CAAwBhC,KAAK+B,IAA7B,EAAmC/C,gBAAgBC,OAAnD,CAAR;AACA;AAPR;AASA;AACA,+BAAO,KAAKiB,GAAL,CAASiB,SAAT,CAAmBI,KAAnB,EAA0B3C,SAASkD,WAAnC,yBAAqE9B,KAAK+B,IAA1E,CAAP;AACH","file":"datasource.js","sourcesContent":["/*\n * Copyright (c) 2016.  Happy Gears, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport _ from 'lodash';\nimport * as dateMath from './datemath';\nimport {NSGQLApi, SQLGenerator} from './services/api';\nimport {QueryPrompts} from './dictionary';\nimport utils from './services/utils';\n\nconst QueryTableNames = {\n    DEVICES: 'devices'\n};\n\n/**\n * @typedef {{accessToken: string, networkId: number}} PluginOptions\n * @typedef {{url: string, jsonData: PluginOptions}} PluginSettings\n * @typedef {{}} QueryTarget\n * @typedef {{rangeRaw: {from: string, to: string} targets: QueryTarget[]}} QueryOptions\n */\n\nexport class NetSpyGlassDatasource {\n    /**\n     * @param {PluginSettings} instanceSettings\n     * @param $q\n     * @param backendSrv\n     * @param templateSrv\n     */\n    constructor(instanceSettings, $q, backendSrv, templateSrv, $timeout) {\n        const {networkId, accessToken} = instanceSettings.jsonData;\n        const {url} = instanceSettings;\n\n        /** @type INSGQLApiOptions */\n        const options = {\n            baseUrl: `${url}/v2`,\n            token: accessToken || false,\n            endpoints: {\n                data: `/query/net/${networkId}/data`,\n                test: `/ping/net/${networkId}/test`\n            }\n        };\n\n        this.api = new NSGQLApi(backendSrv, $q, options);\n        this.$q = $q;\n        this.$timeout = $timeout;\n    }\n\n    /**\n     * @description This function is called when plugin builds a graph\n     * @param options {QueryOptions} an object built from the data entered in the query dialog\n     * @returns {Promise}\n     */\n    query(options) {\n        const timeRange = {\n            from: utils.getTime(options.rangeRaw.from, false),\n            to: utils.getTime(options.rangeRaw.to, true),\n        };\n        \n        const sqlTargets = options.targets\n            .map((item) => this.api.generateTarget(SQLGenerator.generateSQLQuery(item, {timeRange}), item.format))\n            .filter((item) => item.nsgql !== false);\n\n        if (sqlTargets.length === 0) {\n            return this.$q.resolve({data: []});\n        }\n\n        return this.api.queryData(sqlTargets).then((list) => ({data: list}));\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    testDatasource() {\n        return this.api.ping();\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    getCategories() {\n        const query = SQLGenerator.categories();\n        return this.api\n            .queryData(query, NSGQLApi.FORMAT_JSON, 'categories_cache')\n            .then((data) => _.groupBy(data[0].rows, 'category'));\n    }\n\n    /**\n     * @param {string} variable\n     * @returns {Promise}\n     */\n    getFacets(variable) {\n        const query = SQLGenerator.facets(variable);\n        return this.api.queryData(query, NSGQLApi.FORMAT_LIST, `facet_cache_${variable}`);\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    getSuggestions(data) {\n        let query;\n\n        switch (data.type) {\n            case 'device':\n            case 'component':\n                query = SQLGenerator.suggestion(data.type, data.variable, data.tags);\n                break;\n            default:\n                query = SQLGenerator.suggestion(data.type, QueryTableNames.DEVICES);\n                break;\n        }\n        // return this.api.queryData(query, NSGQLApi.FORMAT_LIST);\n        return this.api.queryData(query, NSGQLApi.FORMAT_LIST, `suggestions_cache_${data.type}`);\n    }\n}"]}