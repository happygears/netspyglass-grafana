{"version":3,"sources":["../src/datasource.js"],"names":["_","dateMath","NSGQLApi","SQLGenerator","utils","Cache","categories","NetSpyGlassDatasource","instanceSettings","$q","backendSrv","templateSrv","jsonData","networkId","accessToken","url","options","baseUrl","token","endpoints","data","test","api","timeRange","from","getTime","rangeRaw","to","sqlTargets","targets","map","item","generateSQLQuery","filter","generateTarget","format","length","resolve","queryData","then","list","ping","query","FORMAT_JSON","groupBy","rows","variable","facets","FORMAT_LIST","_buildTagsWhere","tags","defaults","result","forEach","tag","value","condition","push","key","operator","unshift","console","log"],"mappings":"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","file":"datasource.js","sourcesContent":["/*\n * Copyright (c) 2016.  Happy Gears, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport _ from 'lodash';\nimport * as dateMath from './datemath';\nimport {NSGQLApi, SQLGenerator} from './services/api';\nimport utils from './services/utils';\n\n// const blankValues = {\n//     alias: '',\n//     variable: 'select variable',\n//     device: 'select device',\n//     component: 'select component',\n//     description: '',\n//     sortByEl: 'select sorting',\n//     selector: ' -- ',\n//     aggregator: ' -- ',\n//     group: 'select group',\n//     interval: 'select interval',\n//     tagData: [],\n//     tags: '',\n//     format: '',\n//     columns: '',\n//     unique: '',\n//     refId: '',\n//     blankDropDownElement: '---'\n// };\n\n\n/**\n * @typedef {{accessToken: string, networkId: number}} PluginOptions\n * @typedef {{url: string, jsonData: PluginOptions}} PluginSettings\n * @typedef {{}} QueryTarget\n * @typedef {{rangeRaw: {from: string, to: string} targets: QueryTarget[]}} QueryOptions\n */\n\n\nconst Cache = {\n    categories: false\n};\n\nexport class NetSpyGlassDatasource {\n    /**\n     * @param instanceSettings {PluginSettings}\n     * @param $q\n     * @param backendSrv\n     * @param templateSrv\n     */\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        const {networkId, accessToken} = instanceSettings.jsonData;\n        const {url} = instanceSettings;\n\n        /** @type INSGQLApiOptions */\n        const options = {\n            baseUrl: `${url}/v2`,\n            token: accessToken || false,\n            endpoints: {\n                data: `/query/net/${networkId}/data`,\n                test: `/ping/net/${networkId}/test`\n            }\n        };\n\n        this.api = new NSGQLApi(backendSrv, $q, options);\n        this.$q = $q;\n    }\n\n    /**\n     * @description This function is called when plugin builds a graph\n     * @param options {QueryOptions} an object built from the data entered in the query dialog\n     * @returns {Promise}\n     */\n    query(options) {\n        const timeRange = {\n            from: utils.getTime(options.rangeRaw.from, false),\n            to: utils.getTime(options.rangeRaw.to, true),\n        };\n\n        const sqlTargets = options.targets\n            .map((item) => SQLGenerator.generateSQLQuery(item, {timeRange}))\n            .filter((item) => item !== false)\n            .map((item) => this.api.generateTarget(item, item.format));\n\n        if (sqlTargets.length === 0) {\n            return this.$q.resolve({data: []});\n        }\n\n        return this.api.queryData(sqlTargets)\n            .then(function(list) {\n                return {data: list};\n            });\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    testDatasource() {\n        return this.api.ping();\n    }\n\n\n    /**\n     * @returns {Promise}\n     */\n    getCategories() {\n        const query = SQLGenerator.categories();\n        return this.api\n            .queryData(query, NSGQLApi.FORMAT_JSON, 'categories_cache')\n            .then((data) => _.groupBy(data[0].rows, 'category'));\n    }\n\n    /**\n     * @param {string} variable\n     * @returns {Promise}\n     */\n    getFacets(variable) {\n        const query = SQLGenerator.facets(variable);\n        return this.api.queryData(query, NSGQLApi.FORMAT_LIST, `facet_cache_${variable}`);\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    getSuggestions(data) {\n        // const query = SQLGenerator.suggestion(data);\n        // return this.api.queryData(query, NSGQLApi.FORMAT_LIST, `suggestions_cache_${type}`);\n\n\n        function _buildTagsWhere(tags) {\n            const defaults = 'select value';\n            const result = [];\n\n            tags.forEach((tag) => {\n                if (tag.value !== defaults || 1) {\n                    if (tag.condition) {\n                        result.push(tag.condition);\n                    }\n\n                    result.push({\n                        [tag.key]:[tag.operator, tag.value]\n                    });\n                }\n            });\n\n            if (result.length) {\n                result.unshift('AND');\n                return result;\n            }\n\n            return false;\n        }\n\n\n        console.log(_buildTagsWhere(data.tags));\n\n        return this.$q.resolve([]);\n    }\n}"]}