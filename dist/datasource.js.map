{"version":3,"sources":["../src/datasource.js"],"names":["_","dateMath","NetSpyGlassDatasource","result","map","data","d","i","text","value","tagMatches","tags","idx","length","tm","tt","tagOperation","tagFacet","tagWord","push","join","instanceSettings","$q","backendSrv","templateSrv","type","url","name","networkId","jsonData","accessToken","useToken","undefined","endpointsBase","endpoints","category","variable","query","test","blankDropDownElement","blankValues","alias","device","component","description","sortByEl","selector","aggregator","limit","group","interval","tagData","format","columns","unique","refId","clearString","endpoint","method","datasourceRequest","headers","options","self","queryAsStr","aliases","targets","targetDlg","needToBuildQuery","nsgqlQuery","buildQueryFromQueryDialogData","target","JSON","stringify","replace","scopedVars","response","_apiCall","then","series","datapoints","id","getSeriesName","nsgql","console","log","aliasWithVarsReplaced","regex","match","g1","g2","tag","status","message","title","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","interpolated","err","reject","buildQueryFromText","mapToTextText","mapToTextValue","buildQuery","index","clonedOptions","jQuery","extend","facet","queryObject","updatedTarget","replaceTemplateVars","field","replaced","startsWith","item","temp","key","filter","isBlankTagMatch","t","parse","templateSrvParameters","hide","removeBlanks","transformTagMatch","from","getTimeForApiCall","until","to","groupByTime","date","roundUp","isString","parts","exec","valueOf","toFixed"],"mappings":"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","file":"datasource.js","sourcesContent":["/*\n * Copyright (c) 2016.  Happy Gears, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport _ from \"lodash\";\nimport * as dateMath from './datemath';\n\nexport class NetSpyGlassDatasource {\n\n    static mapToTextValue(result) {\n        return _.map(result.data, (d, i) => {\n            return {text: d, value: i};\n        });\n    }\n\n    static mapToTextText(result) {\n        return _.map(result.data, (d, i) => {\n            return {text: d, value: d};\n        });\n    }\n\n    /**\n     * we get tag matches from the dialog in the form\n     *\n     * [{\"tagFacet\":\"Explicit\",\"tagWord\":\"core\",\"tagOperation\":\"==\"}, {\"tagFacet\":\"Vendor\",\"tagWord\":\"Cisco\",\"tagOperation\":\"<>\"}]\n     *\n     * transform this to\n     *\n     * \"Explicit.core, !Vendor.Cisco\"\n     *\n     */\n    static transformTagMatch(tagMatches) {\n        var tags = [];\n        var idx;\n        for (idx = 0; idx < tagMatches.length; idx++) {\n            var tm = tagMatches[idx];\n            var tt = ((tm.tagOperation === '<>') ? '!' : '') + tm.tagFacet + ((tm.tagWord !== '') ? ('.' + tm.tagWord) : '');\n            tags.push(tt);\n        }\n        return tags.join(',');\n    }\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.$q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.networkId = instanceSettings.jsonData.networkId || 1;\n        this.accessToken = (instanceSettings.jsonData.useToken !== false && instanceSettings.jsonData.accessToken !== undefined && instanceSettings.jsonData.accessToken !== '') ? '?access_token=' + instanceSettings.jsonData.accessToken : '';\n        this.endpointsBase = '/v2/query/net/' + this.networkId;\n        this.endpoints = {};\n        this.endpoints.category = this.endpointsBase + '/categories/' + this.accessToken;\n        this.endpoints.variable = this.endpointsBase + '/variables/';\n        this.endpoints.query = this.endpointsBase + '/data/' + this.accessToken;\n        this.endpoints.test = '/v2/ping/net/' + this.networkId + \"/test/\" + this.accessToken;\n\n        this.blankDropDownElement = '---';\n\n        this.blankValues = {};\n        this.blankValues.alias = '';\n        this.blankValues.variable = 'select variable';\n        this.blankValues.device = 'select device';\n        this.blankValues.component = 'select component';\n        this.blankValues.description = '';\n        this.blankValues.sortByEl = 'select sorting';\n        this.blankValues.selector = ' -- ';\n        this.blankValues.aggregator = ' -- ';\n        this.blankValues.limit = 'select limit';\n        this.blankValues.group = 'select group';\n        this.blankValues.tagFacet = this.blankDropDownElement;\n        this.blankValues.tagWord = this.blankDropDownElement;\n        this.blankValues.interval = 'select interval';\n        this.blankValues.tagData = [];\n        this.blankValues.tags = '';\n        this.blankValues.format = '';\n        this.blankValues.columns = '';\n        this.blankValues.unique = '';\n        this.blankValues.refId = '';\n\n        this.clearString = '-- clear selection --';\n    }\n\n    /**\n     * makes actual API call to NetSpyGlass server\n     *\n     * @param endpoint   API call endpoint\n     * @param method     GET or POST\n     * @param query      query object\n     * @returns {*}\n     * @private\n     */\n    _apiCall(endpoint, method, query) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + endpoint,\n            data: query,\n            method: method,\n            headers: {'Content-Type': 'application/json'}\n        });\n    }\n\n    /**\n     * this function is called when plugin builds a graph\n     *\n     * @param options   an object built from the data entered in the query dialog\n     * @returns {*}\n     */\n    query(options) {\n        let self = this;\n        let i,\n            queryAsStr,\n            aliases = {};\n\n        for (let i = 0; i < options.targets.length; i++) {\n            let targetDlg = options.targets[i];\n            aliases[targetDlg.refId] = targetDlg.alias;\n        }\n\n        if( !options.targets[0].needToBuildQuery && options.targets[0].nsgqlQuery ) {\n            queryAsStr = {targets: options.targets[0].nsgqlQuery};\n        } else {\n            // build query object (this replaces dashboard template vars)\n            let query = this.buildQueryFromQueryDialogData(options);\n            for (i = 0; i < query.targets.length; i++) {\n                let target = query.targets[i];\n                // UI passes only sort order (\"ascending\",\"descending\" or \"none\"). Prepend it with default column name\n                target.sortByEl = (target.sortByEl !== 'none') ? 'metric:' + target.sortByEl : target.sortByEl;\n            }\n\n            queryAsStr = JSON.stringify(query);\n            queryAsStr = this.templateSrv.replace(queryAsStr, options.scopedVars);\n        }\n\n        var response = this._apiCall(this.endpoints.query, 'POST', queryAsStr);\n\n        // then: function(a,b,c)\n        return response.then( response => {\n            var data = response.data;\n            if (!data) return response;\n\n            // data is an Array of these:\n            //\n            // component:  \"eth0\"\n            // datapoints: Array[121]\n            // device:     \"synas1\"\n            // target:     \"ifInRate:synas1:eth0\"\n            // variable:   \"ifInRate\"\n\n            for (i = 0; i < data.length; i++) {\n                var series = data[i];\n                if (!series || !series.datapoints || !series.target) continue;\n                var alias = aliases[series.id];\n                if (alias) series.target = self.getSeriesName(series, alias);\n            }\n\n            return response;\n        });\n    }\n\n    executeQuery(nsgql, format) {\n        return this._apiCall(this.endpoints.query, 'POST',\n            {'targets':[{\n                'nsgql': nsgql,\n                'format': format\n            }]},\n        ).then( response => {\n            var data = response.data;\n            if (!data) return response;\n\n            console.log(data);\n\n            return data;\n        })\n    }\n\n    /**\n     * this is where ALIAS BY substitution happens\n     */\n    getSeriesName(series, alias) {\n        // NSGDB-82: we want to be able to use template vars as aliases\n        var aliasWithVarsReplaced = this.templateSrv.replace(alias);\n\n        var regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)]]/g;\n        return aliasWithVarsReplaced.replace(regex, function(match, g1, g2) {\n            var group = g1 || g2;\n\n            if (group === 'm' || group === 'measurement' || group === 'variable') { return series.variable; }\n            if (group === 'device') return series.device;\n            if (group === 'component') return series.component;\n            if (group === 'description') return series.description;\n\n            // if variable has no tags, we can't substitute tag words\n            if (!series.tags) { return match; }\n\n            // see if it is tag facet\n            var tag = series.tags[group];\n            if (typeof tag === 'undefined') return match;\n            return tag;\n        });\n    };\n\n    // Required\n    // Used for testing datasource in datasource configuration page\n    testDatasource() {\n        var endpoint = this.endpoints.test;\n        return this.backendSrv.datasourceRequest({\n            url: this.url + endpoint,\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n            }\n        });\n    }\n\n    annotationQuery(options) {\n        var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n        var annotationQuery = {\n            range: options.range,\n            annotation: {\n                name: options.annotation.name,\n                datasource: options.annotation.datasource,\n                enable: options.annotation.enable,\n                iconColor: options.annotation.iconColor,\n                query: query\n            },\n            rangeRaw: options.rangeRaw\n        };\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/annotations' + this.accessToken,\n            method: 'POST',\n            data: annotationQuery\n        }).then(result => {\n            return result.data;\n        });\n    }\n\n    /**\n     * generic query. Grafana calls this function when it needs to get list of values for a dashboard\n     * template variable.\n     *\n     * User enters query in JSON Format, e.g.\n     *\n     * {\"variable\":\"cpuUtil\",\"columns\":\"device\"}\n     *\n     * User is responsible for setting value of the \"columns\" to what they want to receive back. This can be\n     * \"device\", \"component\" or tag facet\n     *\n     * This function forces request type=table even if user specified something else.\n     *\n     * Server returns data in the following format:\n     *\n     * [ {\n     *   \"columns\" : [ { \"text\" : \"device\" } ],\n     *   \"rows\" : [ [ \"synas1\" ], [ \"ex2200\" ] ],\n     *   \"type\" : \"table\"\n     * } ]\n     *\n     * \"rows\" is a list of lists because normally this query can return multiple columns.\n     * For the purpose of dashboard template we use only the first column if request specified multiple.\n     *\n     * @param query     query object as text string\n     * @returns {Promise.<TResult>}\n     */\n    metricFindQuery(query) {\n        var interpolated;\n        try {\n            interpolated = this.templateSrv.replace(query, query.scopedVars);\n        } catch (err) {\n            return this.$q.reject(err);\n        }\n        var data = this.buildQueryFromText(interpolated);\n        var target = data.targets[0];\n        target.format = 'list';\n        return this._apiCall(this.endpoints.query, 'POST', JSON.stringify(data)).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    findCategoriesQuery() {\n        return this._apiCall(this.endpoints.category, 'POST', '').then(NetSpyGlassDatasource.mapToTextValue);\n    }\n\n    findVariablesQuery(options) {\n        var endpoint = this.endpoints.variable + options.category + this.accessToken;\n        return this._apiCall(endpoint, 'POST', '').then(NetSpyGlassDatasource.mapToTextValue);\n    }\n\n    findDevices(options) {\n        var data = this.buildQuery(options);\n        var target = data.targets[0];\n        target.device = '';  // erase to ignore current selection in the dialog\n        target.component = '';\n        target.columns = 'device';\n        target.unique = 'device';\n        target.sortByEl = 'device:ascending';\n        target.format = 'list';\n        target.limit = -1;\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        return this._apiCall(this.endpoints.query, 'POST', query).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    findComponents(options) {\n        var data = this.buildQuery(options);\n        var target = data.targets[0];\n        target.component = '';  // erase to ignore current selection in the dialog\n        target.columns = 'component';\n        target.unique = 'component';\n        target.sortByEl = 'component:ascending';\n        target.format = 'list';\n        target.limit = -1;\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        return this._apiCall(this.endpoints.query, 'POST', query).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    findTagFacets(options, index) {\n        var clonedOptions = jQuery.extend(true, {}, options);\n        clonedOptions.tagData[index].tagFacet = '';\n        clonedOptions.tagData[index].tagWord = '';\n        var data = this.buildQuery(clonedOptions);\n        var target = data.targets[0];\n        target.columns = 'tagFacet';\n        target.unique = 'tagFacet';\n        target.sortByEl = 'tagFacet:ascending';\n        target.format = 'list';\n        target.limit = -1;\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        return this._apiCall(this.endpoints.query, 'POST', query).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    findTagWordsQuery(options, index) {\n        var clonedOptions = jQuery.extend(true, {}, options);\n        var facet = clonedOptions.tagData[index].tagFacet;\n        clonedOptions.tagData[index].tagWord = '';\n        var data = this.buildQuery(clonedOptions);\n        var target = data.targets[0];\n        target.columns = facet;\n        target.unique = facet;\n        target.sortByEl = facet + ':ascending';\n        target.format = 'list';\n        target.limit = -1;\n        var query = JSON.stringify(data);\n        query = this.templateSrv.replace(query, options.scopedVars);\n        return this._apiCall(this.endpoints.query, 'POST', query).then(NetSpyGlassDatasource.mapToTextText);\n    }\n\n    /**\n     * when building graphing query, this function is called with JS object that has at least\n     * attribute 'targets'\n     *\n     * This must include all fields we support in queries, both constructed from the query dialog\n     * (where each field corresponds to the input element in the dialog) and from the input field in\n     * the dashboard templates where user enters query as json.\n     *\n     * field \"description\" is allowed in dashboard template query but does not have corresponding\n     * input field in the query dialog at this time.\n     */\n    templateSrvParameters(queryObject) {\n        queryObject.targets = _.map(queryObject.targets, target => {\n            var updatedTarget = jQuery.extend(true, {}, target);\n            updatedTarget.category = this.replaceTemplateVars(updatedTarget.category);\n            updatedTarget.device = this.replaceTemplateVars(updatedTarget.device);\n            updatedTarget.component = this.replaceTemplateVars(updatedTarget.component);\n            updatedTarget.description = this.replaceTemplateVars(updatedTarget.description);\n            updatedTarget.limit = (updatedTarget.limit === '') ? -1 : updatedTarget.limit;\n            // target.alias = this.replaceTemplateVars(target.alias);\n            return updatedTarget;\n        });\n        return queryObject;\n    }\n\n    replaceTemplateVars(field) {\n        if (typeof field === 'undefined') return field;\n        var replaced = this.templateSrv.replace(field);\n        // if templateSrc could not replace macro with a value, replace it with an empty string\n        if (field.startsWith('$') && replaced.startsWith('$')) replaced = '';\n        return replaced;\n    }\n\n    removeBlanks(item) {\n        var temp = {};\n        for (var key in item) {\n            if (!(key in this.blankValues)) {\n                continue;\n            }\n            if (typeof item[key] == 'undefined' || item[key] == this.clearString || item[key] == this.blankValues[key]) {\n                continue;\n            }\n            if (key == 'tagFacet' || key == 'tagWord') {\n                continue;\n            }\n            if (key == 'tagData') {\n                temp[key] = item[key].filter(t => !this.isBlankTagMatch(t));\n            } else {\n                temp[key] = item[key];\n            }\n        }\n        return temp;\n    }\n\n    isBlankTagMatch(tm) {\n        if (tm.tagFacet === \"\" || tm.tagFacet === this.blankDropDownElement) return true;\n        return !!(tm.tagWord === \"\" || tm.tagWord === this.blankDropDownElement);\n    }\n\n    /**\n     * build query object from an object that represents single query target. This\n     * is called to get items for drop-down lists in the graph or table panel query dialog.\n     */\n    buildQuery(options) {\n        var queryObject = {\n            targets: [ options ]\n        };\n        return this.buildQueryFromQueryDialogData(queryObject);\n    }\n\n    /**\n     * this function is called when we need to build query object from\n     * query entered as text string (e.g. in dashboard template dialog)\n     */\n    buildQueryFromText(options) {\n        var queryObject = {\n            targets: [ JSON.parse(options) ]\n        };\n        return this.buildQueryFromQueryDialogData(queryObject);\n    }\n\n    /**\n     * build query object from query dialog that can have multiple targets. This\n     * is used when plugin builds query for the graph or table panel\n     */\n    buildQueryFromQueryDialogData(query) {\n        this.templateSrvParameters(query);\n        // if we have any \"$word\" left in the query, those are leftover template\n        // variables that did not get expanded because they have no value\n        query.targets = query.targets.filter(t => !t.hide);\n        var queryObject = {\n            targets: []\n        };\n        var index;\n        for (index = query.targets.length - 1; index >= 0; --index) {\n            var target = this.removeBlanks(query.targets[index]);\n            if (typeof target.tagData !== 'undefined') {\n                target.tags = NetSpyGlassDatasource.transformTagMatch(target.tagData);\n            }\n            delete target.tagData;\n            delete target.alias;\n            target.id = target.refId;\n            delete target.refId;\n            queryObject.targets.push(target);\n        }\n        if (typeof query.rangeRaw != 'undefined') {\n            // queryObject.from = this.getTimeFilter(query.rangeRaw.from);\n            // queryObject.until = this.getTimeFilter(query.rangeRaw.to);\n            queryObject.from = NetSpyGlassDatasource.getTimeForApiCall(query.rangeRaw.from, false);\n            queryObject.until = NetSpyGlassDatasource.getTimeForApiCall(query.rangeRaw.to, true);\n            queryObject.groupByTime = query.interval;\n        }\n        // queryObject.scopedVars = '$variable';\n        return queryObject;\n    }\n\n    static getTimeForApiCall(date, roundUp) {\n        if (_.isString(date)) {\n            if (date === 'now') {\n                return 'now';\n            }\n\n            var parts = /^now-(\\d+)([dhmsM])$/.exec(date);\n            if (parts) {\n                return date;\n                // var amount = parseInt(parts[1]);\n                // var unit = parts[2];\n                // return 'now-' + amount + unit;\n            }\n            date = dateMath.parse(date, roundUp);\n        }\n        return (date.valueOf() / 1000).toFixed(0) + 's';\n    }\n}"]}