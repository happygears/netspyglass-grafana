{"version":3,"sources":["../src/datemath.js"],"names":["parse","text","roundUp","undefined","moment","isMoment","_","isDate","time","mathString","index","parseString","substring","length","indexOf","ISO_8601","parseDateMath","isValid","date","dateTime","i","len","c","charAt","type","num","unit","isNaN","numFrom","parseInt","contains","units","endOf","startOf","add","subtract"],"mappings":"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","file":"datemath.js","sourcesContent":["/*\n * Copyright (c) 2016.  Happy Gears, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\nvar units = ['y', 'M', 'w', 'd', 'h', 'm', 's'];\n\nexport function parse(text, roundUp) {\n    if (!text) { return undefined; }\n    if (moment.isMoment(text)) { return text; }\n    if (_.isDate(text)) { return moment(text); }\n\n    var time;\n    var mathString = '';\n    var index;\n    var parseString;\n\n    if (text.substring(0, 3) === 'now') {\n        time = moment();\n        mathString = text.substring('now'.length);\n    } else {\n        index = text.indexOf('||');\n        if (index === -1) {\n            parseString = text;\n            mathString = ''; // nothing else\n        } else {\n            parseString = text.substring(0, index);\n            mathString = text.substring(index + 2);\n        }\n        // We're going to just require ISO8601 timestamps, k?\n        time = moment(parseString, moment.ISO_8601);\n    }\n\n    if (!mathString.length) {\n        return time;\n    }\n\n    return parseDateMath(mathString, time, roundUp);\n}\n\nexport function isValid(text) {\n    var date = parse(text);\n    if (!date) {\n        return false;\n    }\n\n    if (moment.isMoment(date)) {\n        return date.isValid();\n    }\n\n    return false;\n}\n\nexport function parseDateMath(mathString, time, roundUp) {\n    var dateTime = time;\n    var i = 0;\n    var len = mathString.length;\n\n    while (i < len) {\n        var c = mathString.charAt(i++);\n        var type;\n        var num;\n        var unit;\n\n        if (c === '/') {\n            type = 0;\n        } else if (c === '+') {\n            type = 1;\n        } else if (c === '-') {\n            type = 2;\n        } else {\n            return undefined;\n        }\n\n        if (isNaN(mathString.charAt(i))) {\n            num = 1;\n        } else if (mathString.length === 2) {\n            num = mathString.charAt(i);\n        } else {\n            var numFrom = i;\n            while (!isNaN(mathString.charAt(i))) {\n                i++;\n                if (i > 10) { return undefined; }\n            }\n            num = parseInt(mathString.substring(numFrom, i), 10);\n        }\n\n        if (type === 0) {\n            // rounding is only allowed on whole, single, units (eg M or 1M, not 0.5M or 2M)\n            if (num !== 1) {\n                return undefined;\n            }\n        }\n        unit = mathString.charAt(i++);\n\n        if (!_.contains(units, unit)) {\n            return undefined;\n        } else {\n            if (type === 0) {\n                if (roundUp) {\n                    dateTime.endOf(unit);\n                } else {\n                    dateTime.startOf(unit);\n                }\n            } else if (type === 1) {\n                dateTime.add(num, unit);\n            } else if (type === 2) {\n                dateTime.subtract(num, unit);\n            }\n        }\n    }\n    return dateTime;\n}\n\n"]}