{"version":3,"sources":["../src/hg-sql-builder.js"],"names":["SQLBuilderFactory","OP","SQLBuilder","OPERATORS","escape","buildWhere","factory","query","options","setOptions","angular","extend","distinct","select","from","where","orderBy","groupBy","limit","value","columns","order","push","group","offset","sql","length","join","el","operand","AND","multiOperand","Array","isArray","reduce","result","isOperand","WITH_BRACKETS","IN","NOT_IN","isObject","splice","forEach","wherePart","idx","key","operator","toUpperCase","slice","BETWEEN","current","item","MATCH_IP","joinString","op","indexOf","EQ","MATCH_IP_SUBNET","OR","NOT_NULL","localOperand","isString","str","replace","NOT_EQ","REGEXP","IS_NULL"],"mappings":"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","file":"hg-sql-builder.js","sourcesContent":["\"use strict\";\n\nclass SQLBuilder {\n  constructor(options = {}) {\n    this.setOptions(options);\n  }\n\n  setOptions(options) {\n    this.options = angular.extend({\n      distinct: false,\n      select: [],\n      from: false,\n      where: false,\n      orderBy: [],\n      groupBy: [],\n      limit: []\n    }, options);\n\n    return this;\n  }\n\n  getOptions() {\n    return this.options;\n  }\n\n  setDistinct(value = false) {\n    this.options.distinct = value;\n    return this;\n  }\n\n  select(columns = []) {\n    this.options.select = columns;\n    return this;\n  }\n\n  from(from) {\n    this.options.from = from;\n    return this;\n  }\n\n  where(where = []) {\n    this.options.where = where;\n    return this;\n  }\n\n  orderBy(order) {\n    this.options.orderBy.push(order);\n    return this;\n  }\n\n  groupBy(group) {\n    this.options.groupBy = [group];\n    return this;\n  }\n\n  limit(limit, offset = 0) {\n    this.options.limit = [limit, offset];\n    return this;\n  }\n\n  clearLimit() {\n    this.options.limit = 0;\n    return this;\n  }\n\n  clearGroupBy() {\n    this.options.groupBy = [];\n    return this;\n  }\n\n  clearOrderBy() {\n    this.options.orderBy = [];\n    return this;\n  }\n\n  compile() {\n    let sql = [];\n\n    if (this.options.distinct || this.options.select.length) {\n      sql.push('SELECT');\n    }\n\n    if (this.options.distinct) {\n      sql.push('DISTINCT');\n    }\n\n    if (this.options.select.length) {\n      sql.push(this.options.select.join(','));\n    }\n\n    if (this.options.from) {\n      sql.push('FROM', this.options.from);\n    }\n\n    if (this.options.where) {\n      sql.push('WHERE');\n      sql.push(SQLBuilder.buildWhere(this.options.where));\n    }\n\n    if (this.options.groupBy.length) {\n      sql.push(`GROUP BY ${this.options.groupBy.join(', ')}`)\n    }\n\n    if (this.options.orderBy.length) {\n      sql.push(`ORDER BY ${this.options.orderBy.join(', ')}`)\n    }\n\n    if (this.options.limit.length) {\n      sql.push(`LIMIT ${this.options.limit.join(', ')}`)\n    }\n\n    return sql.join(' ');\n  }\n\n  static isOperand(el) {\n    if( typeof el !== 'string' ) return false;\n    return !!SQLBuilder.OPERATORS[el];\n  }\n}\n\nSQLBuilder.buildWhere = function (where) {\n    let sql = [];\n    let operand = SQLBuilder.OPERATORS.AND;\n    let multiOperand = Array.isArray(where) && where.reduce((result,el) => {\n            return SQLBuilder.isOperand(el) ? result + 1 : result;\n        },0) > 1;\n\n    const WITH_BRACKETS = [\n        SQLBuilder.OPERATORS.IN,\n        SQLBuilder.OPERATORS.NOT_IN\n    ];\n\n    if (!angular.isArray(where) && angular.isObject(where)) {\n        where = [operand, where];\n    }\n\n    if (where.length >= 2) {\n        operand = where[0];\n        where = where.splice(1);\n\n        where.forEach((wherePart, idx) => {\n            if (angular.isArray(wherePart)) {\n                sql.push(`(${this.buildWhere(wherePart)})`);\n            } else if (angular.isObject(wherePart)) {\n                angular.forEach(wherePart, function (value, key) {\n                    let operator = '=';\n\n                    if (angular.isArray(value)) {\n                        operator = value[0].toUpperCase();\n                        value = value.slice(1);\n\n                        if(operator === SQLBuilder.OPERATORS.BETWEEN) {\n                            let result;\n\n                            result = value.reduce( (current, item) => {\n                                if (current.length) {\n                                    current += ` ${SQLBuilder.OPERATORS.AND} `;\n                                }\n                                return current + `'${item}'`;\n                            }, '');\n\n                            value = result;\n\n                        } else if (operator === SQLBuilder.OPERATORS.MATCH_IP) {\n                            let joinString;\n\n                            joinString = value.reduce(function (current, item) {\n                                let op;\n\n                                op = item.indexOf('/') === -1\n                                    ? SQLBuilder.OPERATORS.EQ\n                                    : SQLBuilder.OPERATORS.MATCH_IP_SUBNET;\n\n\n                                if (current.length) {\n                                    current += ` ${SQLBuilder.OPERATORS.OR} `;\n                                }\n\n                                return current + `${key} ${op} '${item}'`;\n                            }, '');\n\n                            sql.push(joinString);\n                            return;\n                        } else if (operator === SQLBuilder.OPERATORS.NOT_NULL) {\n                            sql.push(`${key} ${SQLBuilder.OPERATORS.NOT_NULL}`);\n                            return;\n                        } else if (WITH_BRACKETS.indexOf(operator) !== -1) {\n                            value = `('${value.join('\\', \\'')}')`;\n                        } else {\n                            value = `'${value}'`;\n                        }\n                    } else {\n                        value = `'${value}'`;\n                    }\n\n\n                    if(multiOperand && where.length > idx+1) {\n                        let localOperand = SQLBuilder.isOperand(where[idx+1]) ? where[idx+1] : 'AND';\n                        sql.push(`${key} ${operator} ${value} ${localOperand}`)\n                    } else {\n                        sql.push(`${key} ${operator} ${value}`);\n                    }\n                })\n            } else if (angular.isString(wherePart)) {\n                if( !(multiOperand && SQLBuilder.isOperand(wherePart)) ) {\n                    sql.push(wherePart);\n                }\n            }\n        });\n\n        if(!multiOperand) {\n            return sql.join(` ${operand} `);\n        } else {\n            return sql.join(' ');\n        }\n\n\n    } else  if (where.length === 1) {\n        where = [];\n    }\n\n    return where.join(` ${operand} `);\n};\n\nSQLBuilder.escape = function (str) {\n  return str.replace(/\\'/g,  '\\\\\\'');\n};\n\nSQLBuilder.OPERATORS = {\n  AND: 'AND',\n  OR: 'OR',\n  IN: 'IN',\n  NOT_IN: 'NOT IN',\n  EQ: '=',\n  NOT_EQ: '<>',\n  REGEXP: 'REGEXP',\n  IS_NULL: 'ISNULL',\n  NOT_NULL: 'NOTNULL',\n  MATCH_IP: '_ABSTRACT_OPERATOR_IP_MATCH',\n  MATCH_IP_SUBNET: '<<',\n  BETWEEN: 'BETWEEN'\n};\n\nfunction SQLBuilderFactory () {\n  return {\n    OP: SQLBuilder.OPERATORS,\n    escape: SQLBuilder.escape,\n    buildWhere: SQLBuilder.buildWhere,\n    /**\n     * @param query\n     * @returns {SQLBuilder}\n     */\n    factory: function (query = {}) {\n      return new SQLBuilder(query);\n    }\n  };\n}\n\nexport default SQLBuilderFactory;\n"]}