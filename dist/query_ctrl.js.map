{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","SQLBuilderFactory","_","NetSpyGlassDatasourceQueryCtrl","$scope","$injector","templateSrv","$q","uiSegmentSrv","$timeout","prompts","scope","injector","clearSelection","blankDropDownElement","target","category","variable","device","component","sortByEl","selector","aggregator","limit","group","tagFacet","tagOperation","tagWord","tagData","format","panel","type","formatDisplay","columns","alias","SQLBuilder","queryConfig","factory","customNsgqlQuery","queryConfigWhere","rowMode","groupByFormats","groupBy","val","orderBy","tagSegments","push","newPlusButton","removeTagFilterSegment","newSegment","fake","value","categories","getCategories","selectData","addItemToSelect","selectList","data","func","length","refresh","index","splice","datasource","executeQuery","select","distinct","from","where","compile","then","formattedList","rows","console","log","buildNsgQLString","all","values","facetsList","variables","resultList","tags","map","facet","name","selectedValues","el","filter","Boolean","currentValue","prompt","results","segments","segment","text","expandable","unshift","html","getVariables","query","transformToSegments","findDevices","findComponents","findTagFacets","findTagWordsQuery","rawQuery","needToBuildQuery","operation","sortOrder","element","elementDisplayStr","onSelectChange","clearOrderBy","list","when","clearLimit","clearGroupBy","groupByTimeOptions","nextValue","newOperators","nsgql","addTemplateVars","segmentKeyValue","queryObj","cloneDeep","transformToWhereSegments","angular","copy","Math","max","newCondition","newOperator","newFake","whereValue","cssClass","rebuildTargetTagConditions","tagIndex","tagOperator","each","segment2","key","operator","condition","_buildTagsWhere","tagsList","result","forEach","tag","i","obj","params","str","wherePart","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["/*\n * Copyright (c) 2016.  Happy Gears, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\nimport SQLBuilderFactory from './hg-sql-builder';\nimport _ from \"lodash\";\n\nexport class NetSpyGlassDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector, templateSrv, $q, uiSegmentSrv, $timeout) {\n        super($scope, $injector);\n\n        this.prompts = {\n            'category': 'select category',\n            'variable': 'select variable',\n            'device': 'select device',\n            'component': 'select component',\n            'groupByType': 'select type',\n            'groupBy': 'select value',\n            'orderBy': 'select value',\n            'selectItem': 'select item',\n            'whereValue': 'select value',\n        };\n\n        this.scope = $scope;\n        this.injector = $injector;\n\n        this.templateSrv = templateSrv;\n        this.$q = $q;\n        this.uiSegmentSrv = uiSegmentSrv;\n        this.$timeout = $timeout;\n\n        this.clearSelection = '-- clear selection --';\n        this.blankDropDownElement = '---';\n        this.target.category = this.target.category || this.prompts['category'];\n        this.target.variable = this.target.variable || this.prompts['variable'];\n        this.target.device = this.target.device || this.prompts['device'];\n        this.target.component = this.target.component || this.prompts['component'];\n        this.target.sortByEl = this.target.sortByEl || 'none';\n        this.target.selector = this.target.selector || ' -- ';\n        this.target.aggregator = this.target.aggregator || ' -- ';\n        this.target.limit = this.target.limit || '100';\n        this.target.group = this.target.group || 'select group';\n        this.target.tagFacet = this.target.tagFacet || this.blankDropDownElement;\n        this.target.tagOperation = this.target.tagOperation || '==';\n        this.target.tagWord = this.target.tagWord || this.blankDropDownElement;\n        this.target.tagData = this.target.tagData || [];\n\n        this.target.format = this.panel.type === 'table' ? 'table' : 'time_series';\n        this.target.formatDisplay = this.target.formatDisplay || 'Time Series';\n\n        this.target.columns = this.target.columns || 'time,variable,device,component,metric';\n        this.target.alias = this.target.alias || '';\n\n\n        // _NEW_\n        this.SQLBuilder = new SQLBuilderFactory();\n        this.target.queryConfig = this.SQLBuilder.factory();\n        this.target.customNsgqlQuery = '';\n\n        this.queryConfigWhere = ['AND'];\n        this.rowMode = false;\n\n        this.category = this.target.category || this.prompts['category'];\n        this.variable = this.target.variable || this.prompts['variable'];\n        this.groupByFormats = [this.prompts['groupByType'],'time', 'column'];\n        this.groupBy = {\n            type: this.prompts['groupByType'],\n            val: this.prompts['groupBy']\n        };\n        this.orderBy = this.target.orderBy || this.prompts.orderBy;\n\n        this.tagSegments = [];\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n        this.removeTagFilterSegment = uiSegmentSrv.newSegment({fake: true, value: '-- remove tag filter --'});\n\n        this.categories = [];\n        this.getCategories();\n\n        if( this.panel.type === 'graph' ) {\n            this.selectData = ['time','metric'];\n        }\n        if( this.panel.type === 'table' ) {\n            this.selectData = [];\n            this.addItemToSelect();\n        }\n        this.selectList = [];\n    }\n\n    addItemToSelect(data) {\n        if( typeof data === 'object' ) {\n            this.selectData.push(data)\n        } else {\n            this.selectData.push({\n                value: '',\n                func: [],\n                alias: []\n            });\n        }\n    }\n\n    /**\n     * @deprecated\n     */\n    isCategorySelected() {\n        return this.target.category !== this.prompts['category'] && this.target.category !== this.clearSelection;\n    }\n\n    /**\n     * @deprecated\n     */\n    isVariableSelected() {\n        return this.target.variable !== this.prompts['variable'] && this.target.variable !== this.clearSelection;\n    }\n\n    /**\n     * add new tag matching rule that consists of tag facet, operation ('==' or '<>') and tag word.\n     * Unfortunately if input fields for the tag facet and word are blank, the height of the corresponding\n     * visible element is reduced (element <a> is visible and its height is 0 when it has no contents, so\n     * all we see is the margin around it). To work around that I put \"-\" in these fields. It is unobtrusive\n     * enough and looks like some sort of a prompt, but it is a hack nonetheless.\n     * FIXME: find a way to fix height of the visible element without adding any contents.\n     */\n    /**\n     * @deprecated\n     */\n    tagDataAdd() {\n        this.target.tagData[this.target.tagData.length] = {\n            tagFacet : this.blankDropDownElement,\n            tagWord : this.blankDropDownElement,\n            tagOperation : '=='\n        };\n        this.refresh();\n    }\n    /**\n     * @deprecated\n     */\n    tagDataRemove(index) {\n        this.target.tagData.splice(index,1);\n        this.refresh();\n    }\n\n    getCategories() {\n        this.datasource.executeQuery(this.SQLBuilder.factory({\n            select: ['category,name'],\n            distinct: true,\n            from: 'variables',\n            where: ['AND', {\n                category: ['<>', '']\n            }],\n            orderBy: ['category']\n        }).compile(), 'json')\n            .then( (data) => {\n                let formattedList = _.groupBy(data[0].rows, 'category');\n\n                console.log(formattedList);\n\n                this.categories = formattedList;\n            });\n    }\n    selectCat(category, variable) {\n        this.target.category = category;\n        this.variable = variable;\n        this.target.variable = variable;\n        this.target.queryConfig.from(variable);\n\n        if( this.panel.type === 'graph' ) {\n            this.target.queryConfig.select(this.selectData);\n        }\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    getSelectValue() {\n        this.$q.all([\n            this.datasource.executeQuery(this.SQLBuilder.factory({\n                select: ['tagFacet'],\n                distinct: true,\n                from: this.variable,\n                orderBy: ['tagFacet']\n            }).compile(), 'list'),\n            this.datasource.executeQuery(this.SQLBuilder.factory({\n                select: ['category,name'],\n                distinct: true,\n                from: 'variables',\n                where: ['AND', {\n                    category: ['<>', '']\n                }],\n                orderBy: ['category']\n            }).compile(), 'json')\n        ]).then( (values) => {\n            let facetsList = values[0],\n                variables = _.groupBy(values[1][0].rows, 'category'),\n                resultList = [];\n\n            resultList.push({\n                tags: facetsList.map( (facet) => {\n                    return {name: facet}\n                })\n            });\n\n            resultList.push({\n                type: 'separator'\n            });\n\n            resultList.push({\n                type: 'simple',\n                name: 'time'\n            });\n            resultList.push({\n                type: 'simple',\n                name: 'metric'\n            });\n\n            resultList.push({\n                type: 'separator'\n            });\n\n            resultList.push(variables);\n\n            this.selectList = resultList;\n        });\n    }\n    onSelectUpdated(value) {\n        this.$timeout( () => {\n            let selectedValues = this.selectData.map( (el) => {\n                if( el.value ) {\n                    return el.value;\n                }\n            }).filter(Boolean);\n\n            this.target.queryConfig.select(selectedValues);\n\n            this.buildNsgQLString();\n            this.refresh();\n        }, 0);\n    }\n\n    transformToSegments(currentValue, prompt) {\n        console.log('transformToSegments called:  currentValue=' + currentValue + ' prompt=' + prompt);\n        return (results) => {\n            var segments = _.map(results, segment => {\n                //TODO: really we need to ckeck segment.text if all request types will be 'list'\n                if( segment.text ) {\n                    return this.uiSegmentSrv.newSegment({ value: segment.text, expandable: segment.expandable });\n                } else {\n                    return this.uiSegmentSrv.newSegment({ value: segment });\n                }\n            });\n            // segments.unshift(this.uiSegmentSrv.newSegment({ fake: true, value: this.clearSelection, html: prompt}));\n\n            // there is no need to add \"clear selection\" item if current value is already equal to prompt\n            if (currentValue !== prompt) {\n                segments.unshift(this.uiSegmentSrv.newSegment({ fake: true, value: this.clearSelection, html: prompt}));\n            }\n\n            console.log(segments);\n\n            return segments;\n        };\n    }\n\n    /**\n     * @deprecated\n     */\n    testRemove() {\n        this.target.variable = this.prompts['variable'];\n        this.getVariables();\n        this.refresh();\n    }\n\n    getVariables() {\n        let query = this.SQLBuilder.factory({\n            select: ['name'],\n            distinct: true,\n            from: 'variables',\n            where: ['AND', {\n                category: ['=', this.target.category]\n            }],\n            orderBy: ['name']\n        }).compile();\n\n        return this.datasource.executeQuery(query, 'list')\n            .then(this.transformToSegments(this.target.variable, this.prompts['variable']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getDevices() {\n        return this.datasource.findDevices(this.target)\n            .then(this.transformToSegments(this.target.device, this.prompts['device']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getComponents() {\n        return this.datasource.findComponents(this.target)\n            .then(this.transformToSegments(this.target.component, this.prompts['component']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getTagsFacet(index) {\n        return this.datasource.findTagFacets(this.target, index)\n            .then(this.transformToSegments(this.target.tagFacet, this.target.tagFacet));  // do not add \"-- clear selection --\" item\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getTagsWord(index) {\n        return this.datasource.findTagWordsQuery(this.target, index)\n            .then(this.transformToSegments(this.target.tagWord, this.target.tagWord));  // do not add \"-- clear selection --\" item\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalCategory() {\n        if (this.target.category == this.clearSelection) {\n            this.target.category = this.prompts['category'];\n        }\n        // user has changed category, we should erase variable and other selections because they are\n        // not valid anymore\n        this.target.variable = this.prompts['variable'];\n        this.target.device = this.prompts['device'];\n        this.target.component = this.prompts['component'];\n        this.target.tagData = [];\n        // TODO: clear variable name when category changes. Only variable name field in the same target should change,\n        // variable name fields in other targets should not change\n        // FIXME: this does not look right, there must be a way to update element in the browser without manipulating it directly in DOM\n        // angular.element('#variable-field').children().children('a').html(this.target.variable);\n        // call refresh to force graph reload (which should turn blank since we dont have enough data\n        // to build valid query)\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalVariable() {\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalDevice() {\n        if(this.target.device == this.clearSelection) {\n            this.target.device = this.prompts['device'];\n        }\n        this.refresh();\n    }\n    /**\n     * @deprecated\n     */\n    onChangeInternalComponent() {\n        if(this.target.component == this.clearSelection) {\n            this.target.component = this.prompts['component'];\n        }\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalTagFacet(index) {\n        // clear tag word when user changes tag facet. The dialog enters state where tag facet is selected\n        // but tag word is not. This state is invalid and should be transient, it does not make sense\n        // to call this.refresh() because query is yet incomplete\n        this.target.tagData[index].tagWord = this.blankDropDownElement;\n        // TODO: clear field \"tag word\" when \"tag facet\" changes. Only associated tag word should change,\n        // tag word fields in another tag matches in the same target or other targets should not change.\n        // FIXME: this does not look right, there must be a way to update element in the browser without manipulating it directly in DOM\n        // angular.element('#tag-word-'+index).children().children(\"a.tag-word\").html(this.target.tagData[index].tagWord);\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    //noinspection JSUnusedLocalSymbols\n    onChangeInternalTagWord(index) {\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    tagOperation(index, operation) {\n        this.target.tagData[index].tagOperation = operation;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setSortByEl(sortOrder) {\n        this.target.sortByEl = sortOrder;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setSelector(element) {\n        this.target.selector = element;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setAggregator(element) {\n        this.target.aggregator = element;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setAlias() {\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setFormat(element, elementDisplayStr) {\n        this.target.format = element;\n        this.target.formatDisplay = elementDisplayStr;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setColumns() {\n        // console.log(this.target.columns);\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    // setGroup() {\n    //     if (this.target.group == '') {\n    //         if(this.tempNew !== ''){\n    //             this.target.group = this.tempNew;\n    //         }\n    //         else {\n    //             this.target.group = 'select group';\n    //         }\n    //     }\n    //     this.refresh();\n    // }\n\n\n\n    //////////////////////////////////////////////////\n    //////////////////////////////////////////////////\n    //////////////////_NEW_/////////////////////\n\n\n    onChangeNsgQl() {\n        this.buildNsgQLString({type: 'string'});\n        this.refresh();\n    }\n\n    toggleEditorMode() {\n        this.rowMode = !this.rowMode;\n    }\n\n    getCollapsedText() {\n        return this.target.customNsgqlQuery;\n    }\n\n    onFromChange() {\n        if( this.target.category !== this.category  && this.variable != this.prompts['variable']) {\n            console.log(111);\n            this.target.category = this.category;\n            this.variable = this.prompts['variable'];\n            this.onSelectChange();\n            return;\n        }\n\n        this.target.category = this.category;\n    }\n    onSelectChange() {\n        this.target.variable = this.variable;\n        this.target.queryConfig.select(['time','metric']);\n        this.target.queryConfig.from(this.variable);\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    onOrderByChange() {\n        this.target.queryConfig.clearOrderBy();\n\n        if( this.orderBy != this.clearSelection ) {\n            this.target.queryConfig.orderBy(this.orderBy);\n        }\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n    onOrderByClear() {\n        this.orderBy = null;\n        this.target.queryConfig.clearOrderBy();\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n    getOrderByValues() {\n        let list = [];\n\n        if( this.panel.type === 'graph' ) {\n            list = [\n                this.uiSegmentSrv.newSegment('metric')\n            ];\n        }\n        if( this.panel.type === 'table' ) {\n            list = this.selectData.map( (el) => {\n                return this.uiSegmentSrv.newSegment(el.value);\n            });\n        }\n\n        list.unshift(this.uiSegmentSrv.newSegment({fake: true, value: this.clearSelection, html: this.prompts.orderBy}));\n\n        return this.$q.when(list);\n    }\n\n    onLimitChange() {\n        if( this.limit ) {\n            this.target.queryConfig.limit(this.limit);\n        } else {\n            this.target.queryConfig.clearLimit();\n        }\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    onGroupByTypeChange() {\n        //TODO: fix this behavior\n        this.groupBy.val = this.prompts['groupBy'];\n\n        if( this.groupBy.type === 'select type' ) {\n            this.target.queryConfig.clearGroupBy();\n            this.buildNsgQLString();\n            this.refresh();\n        }\n    }\n\n    onGroupByChange() {\n        if( this.groupBy.type === 'time' ) {\n            this.target.queryConfig.groupBy(`time(${this.groupBy.val})`);\n        }\n        if( this.groupBy.type === 'column' ) {\n            this.target.queryConfig.groupBy(this.groupBy.val);\n        }\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    getGroupByVariables() {\n        if( this.groupBy.type === 'time' ) {\n            let groupByTimeOptions = [\n                this.uiSegmentSrv.newSegment('1s'),\n                this.uiSegmentSrv.newSegment('1m'),\n                this.uiSegmentSrv.newSegment('30m'),\n                this.uiSegmentSrv.newSegment('1h'),\n                this.uiSegmentSrv.newSegment('1d')\n            ];\n            return this.$q.when(groupByTimeOptions);\n        }\n\n        if( this.groupBy.type === 'column' ) {\n            let query = this.SQLBuilder.factory({\n                select: ['tagFacet'],\n                distinct: true,\n                from: this.variable,\n                orderBy: ['tagFacet']\n            }).compile();\n\n            return this.datasource.executeQuery(query, 'list')\n                .then(this.transformToSegments(this.groupBy.val, '-- select group --'));\n        }\n    }\n\n\n    getTagsOrValues(segment, index) {\n        console.log(segment, index);\n        let format = 'list';\n\n        if (segment.type === 'condition') {\n            return this.$q.when([this.uiSegmentSrv.newSegment('AND'), this.uiSegmentSrv.newSegment('OR')]);\n        }\n        if (segment.type === 'operator') {\n            var nextValue = this.tagSegments[index+1].value;\n            return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<>', '<', '>','REGEXP','NOT REGEXP']));\n        }\n\n        let nsgql, addTemplateVars;\n        if (segment.type === 'key' || segment.type === 'plus-button') {\n            nsgql = this.SQLBuilder.factory({\n                select: ['tagFacet'],\n                distinct: true,\n                from: this.variable,\n                orderBy: ['tagFacet']\n            }).compile();\n\n            addTemplateVars = false;\n        } else if (segment.type === 'value')  {\n            let segmentKeyValue = this.tagSegments[index - 2].value,\n                queryObj;\n\n            if (segmentKeyValue === 'device') {\n                queryObj = {\n                    select: ['device'],\n                    distinct: true,\n                    from: this.variable,\n                    orderBy: ['device'],\n                    where: _.cloneDeep(this.queryConfigWhere)\n                };\n            }\n            if (segmentKeyValue === 'component') {\n                queryObj = {\n                    select: ['component'],\n                    distinct: true,\n                    from: this.variable,\n                    orderBy: ['component'],\n                    where: _.cloneDeep(this.queryConfigWhere)\n                };\n            }\n            if (segmentKeyValue !== 'device' && segmentKeyValue !== 'component') {\n                queryObj = {\n                    select: [this.tagSegments[index-2].value],\n                    distinct: true,\n                    from: 'devices',\n                    where: {},\n                    orderBy: [this.tagSegments[index-2].value]\n                };\n                queryObj.where[this.tagSegments[index-2].value] = ['NOTNULL'];\n            }\n\n            nsgql = this.SQLBuilder.factory(queryObj).compile();\n        }\n\n        return this.datasource.executeQuery(nsgql, format)\n            .then((results) => {\n                if (segment.type === 'key' || segment.type === 'plus-button') {\n                    results.unshift('component');\n                    results.unshift('device');\n                }\n                return results\n            })\n            .then(this.transformToWhereSegments(addTemplateVars))\n            .then(results => {\n                if (segment.type === 'key') {\n                    results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n                }\n                return results;\n            });\n    }\n\n    transformToWhereSegments() {\n        return (results) => {\n            var segments = _.map(results, segment => {\n                return this.uiSegmentSrv.newSegment({ value: `${segment}` });\n            });\n\n            return segments;\n        };\n    }\n\n    tagSegmentUpdated(segment, index) {\n        this.tagSegments[index] = segment;\n\n        // handle remove tag condition\n        if (segment.value === this.removeTagFilterSegment.value) {\n            this.tagSegments.splice(index, 3);\n            if (this.tagSegments.length === 0) {\n                this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n            } else if (this.tagSegments.length > 2) {\n                this.tagSegments.splice(Math.max(index-1, 0), 1);\n                if (this.tagSegments[this.tagSegments.length-1].type !== 'plus-button') {\n                    this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n                }\n            }\n        } else {\n            if (segment.type === 'plus-button') {\n                if (index > 2) {\n                    this.tagSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n                }\n                this.tagSegments.push(this.uiSegmentSrv.newOperator('='));\n                this.tagSegments.push(this.uiSegmentSrv.newFake(this.prompts.whereValue, 'value', 'query-segment-value'));\n                segment.type = 'key';\n                segment.cssClass = 'query-segment-key';\n            }\n\n            if ((index+1) === this.tagSegments.length) {\n                this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n            }\n        }\n\n        this.rebuildTargetTagConditions();\n    }\n\n    rebuildTargetTagConditions() {\n        var tags = [];\n        var tagIndex = 0;\n        var tagOperator = \"\";\n\n        console.log(this.tagSegments);\n\n        _.each(this.tagSegments, (segment2, index) => {\n            if (segment2.type === 'key') {\n                if (tags.length === 0) {\n                    tags.push({});\n                }\n                tags[tagIndex].key = segment2.value;\n            } else if (segment2.type === 'value') {\n                tagOperator = tags[tagIndex].operator;\n                if (tagOperator) {\n                    this.tagSegments[index-1] = this.uiSegmentSrv.newOperator(tagOperator);\n                    tags[tagIndex].operator = tagOperator;\n                }\n                tags[tagIndex].value = segment2.value;\n            } else if (segment2.type === 'condition') {\n                tags.push({ condition: segment2.value });\n                tagIndex += 1;\n            } else if (segment2.type === 'operator') {\n                tags[tagIndex].operator = segment2.value;\n            }\n        });\n\n        this.target.tags = tags;\n\n        this.queryConfigWhere = ['AND'];\n        this.queryConfigWhere.push(this._buildTagsWhere('tags', this.target.tags));\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    _buildTagsWhere(name, tagsList) {\n        let result = [];\n\n        if(tagsList.length) {\n            tagsList.forEach( (tag, i) => {\n                if( tag.value == this.prompts.whereValue) return;\n\n                let obj = {};\n                obj[tag.key] = [tag.operator, tag.value];\n\n                if(tag.condition) {\n                    result.push(tag.condition);\n                }\n                result.push(obj);\n            })\n        }\n\n        if( result.length ) {\n            result.unshift('AND');\n        } else {\n            result = null;\n        }\n\n        return result;\n    }\n\n    buildNsgQLString(params = {}) {\n        let str;\n\n        if( params.type == 'string' ) {\n            str = this.target.customNsgqlQuery;\n        }\n\n        if( params.type != 'string' ) {\n            let wherePart;\n            wherePart = _.cloneDeep(this.queryConfigWhere);\n            wherePart.push('$_timeFilter'); //GROUP BY time($__interval)\n            this.target.queryConfig.where( wherePart );\n\n            str = this.target.queryConfig.compile();\n        }\n\n        console.log('%cNsgQLString', 'color: blueviolet; font-weight: bold;', str);\n        this.target.customNsgqlQuery = str;\n    };\n}\n\nNetSpyGlassDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}