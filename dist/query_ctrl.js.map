{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","SQLBuilderFactory","_","NetSpyGlassDatasourceQueryCtrl","$scope","$injector","templateSrv","$q","uiSegmentSrv","prompts","scope","injector","clearSelection","blankDropDownElement","target","category","variable","device","component","sortByEl","selector","aggregator","limit","group","tagFacet","tagOperation","tagWord","tagData","format","formatDisplay","columns","alias","SQLBuilder","queryConfig","factory","customNsgqlQuery","queryConfigWhere","rowMode","groupByFormats","groupBy","type","val","tagSegments","push","newPlusButton","removeTagFilterSegment","newSegment","fake","value","categories","getCategories","selectData","console","log","length","refresh","index","splice","datasource","executeQuery","select","distinct","from","where","orderBy","compile","then","data","formattedList","rows","buildNsgQLString","currentValue","prompt","results","segments","map","segment","text","expandable","unshift","html","getVariables","query","transformToSegments","findDevices","findComponents","findTagFacets","findTagWordsQuery","rawQuery","needToBuildQuery","operation","sortOrder","element","elementDisplayStr","onSelectChange","clearLimit","clearGroupBy","groupByTimeOptions","when","nextValue","newOperators","nsgql","addTemplateVars","queryObj","transformToWhereSegments","angular","copy","variables","name","Math","max","newCondition","newOperator","newFake","cssClass","rebuildTargetTagConditions","tags","tagIndex","tagOperator","each","segment2","key","operator","condition","_buildTagsWhere","tagsList","result","forEach","tag","i","obj","params","str","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["/*\n * Copyright (c) 2016.  Happy Gears, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\nimport SQLBuilderFactory from './hg-sql-builder';\nimport _ from \"lodash\";\n\nexport class NetSpyGlassDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector, templateSrv, $q, uiSegmentSrv) {\n        super($scope, $injector);\n\n        this.prompts = {\n            'category': 'select category',\n            'variable': 'select variable',\n            'device': 'select device',\n            'component': 'select component',\n            'groupByVal': 'select group',\n        };\n\n        this.scope = $scope;\n        this.injector = $injector;\n\n        this.templateSrv = templateSrv;\n        this.$q = $q;\n        this.uiSegmentSrv = uiSegmentSrv;\n\n        this.clearSelection = '-- clear selection --';\n        this.blankDropDownElement = '---';\n        this.target.category = this.target.category || this.prompts['category'];\n        this.target.variable = this.target.variable || this.prompts['variable'];\n        this.target.device = this.target.device || this.prompts['device'];\n        this.target.component = this.target.component || this.prompts['component'];\n        this.target.sortByEl = this.target.sortByEl || 'none';\n        this.target.selector = this.target.selector || ' -- ';\n        this.target.aggregator = this.target.aggregator || ' -- ';\n        this.target.limit = this.target.limit || '100';\n        this.target.group = this.target.group || 'select group';\n        this.target.tagFacet = this.target.tagFacet || this.blankDropDownElement;\n        this.target.tagOperation = this.target.tagOperation || '==';\n        this.target.tagWord = this.target.tagWord || this.blankDropDownElement;\n        this.target.tagData = this.target.tagData || [];\n\n        this.target.format = this.target.format || 'time_series';\n        this.target.formatDisplay = this.target.formatDisplay || 'Time Series';\n\n        this.target.columns = this.target.columns || 'time,variable,device,component,metric';\n        this.target.alias = this.target.alias || '';\n\n\n        // _NEW_\n        this.SQLBuilder = new SQLBuilderFactory();\n        this.target.queryConfig = this.SQLBuilder.factory();\n        this.target.customNsgqlQuery = '';\n\n        this.queryConfigWhere = ['AND'];\n        this.rowMode = false;\n\n        this.category = this.target.category || this.prompts['category'];\n        this.variable = this.target.variable || this.prompts['variable'];\n        this.groupByFormats = ['select type','time', 'column'];\n        this.groupBy = {\n            type: 'select type',\n            val: this.prompts['groupByVal']\n        };\n\n        this.tagSegments = [];\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n        this.removeTagFilterSegment = uiSegmentSrv.newSegment({fake: true, value: '-- remove tag filter --'});\n\n        this.categories = [];\n        this.getCategories();\n\n\n        this.selectData = 'metric';\n        console.log(this);\n        console.log($scope);\n    }\n\n    /**\n     * @deprecated\n     */\n    isCategorySelected() {\n        return this.target.category !== this.prompts['category'] && this.target.category !== this.clearSelection;\n    }\n\n    /**\n     * @deprecated\n     */\n    isVariableSelected() {\n        return this.target.variable !== this.prompts['variable'] && this.target.variable !== this.clearSelection;\n    }\n\n    /**\n     * add new tag matching rule that consists of tag facet, operation ('==' or '<>') and tag word.\n     * Unfortunately if input fields for the tag facet and word are blank, the height of the corresponding\n     * visible element is reduced (element <a> is visible and its height is 0 when it has no contents, so\n     * all we see is the margin around it). To work around that I put \"-\" in these fields. It is unobtrusive\n     * enough and looks like some sort of a prompt, but it is a hack nonetheless.\n     * FIXME: find a way to fix height of the visible element without adding any contents.\n     */\n    /**\n     * @deprecated\n     */\n    tagDataAdd() {\n        this.target.tagData[this.target.tagData.length] = {\n            tagFacet : this.blankDropDownElement,\n            tagWord : this.blankDropDownElement,\n            tagOperation : '=='\n        };\n        this.refresh();\n    }\n    /**\n     * @deprecated\n     */\n    tagDataRemove(index) {\n        this.target.tagData.splice(index,1);\n        this.refresh();\n    }\n\n    getCategories() {\n        // let query = this.SQLBuilder.factory({\n        //     select: ['category'],\n        //     distinct: true,\n        //     from: 'variables',\n        //     where: ['AND', {\n        //         category: ['<>', '']\n        //     }],\n        //     orderBy: ['category']\n        // }).compile();\n        //\n        this.datasource.executeQuery(this.SQLBuilder.factory({\n            select: ['category,name'],\n            distinct: true,\n            from: 'variables',\n            where: ['AND', {\n                category: ['<>', '']\n            }],\n            orderBy: ['category']\n        }).compile(), 'json')\n            .then( (data) => {\n                let formattedList = _.groupBy(data[0].rows, 'category');\n\n                this.categories = formattedList;\n            });\n\n\n        // return this.datasource.executeQuery(query, 'list')\n        //     .then(this.transformToSegments(this.target.category, this.prompts['category']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n    selectCat(category, variable) {\n        console.log(category, variable);\n        this.target.category = category;\n        this.variable = variable;\n        this.target.variable = variable;\n        this.target.queryConfig.select(['time','metric']);\n        this.target.queryConfig.from(variable);\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    transformToSegments(currentValue, prompt) {\n        console.log('transformToSegments called:  currentValue=' + currentValue + ' prompt=' + prompt);\n        return (results) => {\n            var segments = _.map(results, segment => {\n                //TODO: really we need to ckeck segment.text if all request types will be 'list'\n                if( segment.text ) {\n                    return this.uiSegmentSrv.newSegment({ value: segment.text, expandable: segment.expandable });\n                } else {\n                    return this.uiSegmentSrv.newSegment({ value: segment });\n                }\n            });\n            // segments.unshift(this.uiSegmentSrv.newSegment({ fake: true, value: this.clearSelection, html: prompt}));\n\n            // there is no need to add \"clear selection\" item if current value is already equal to prompt\n            if (currentValue !== prompt) {\n                segments.unshift(this.uiSegmentSrv.newSegment({ fake: true, value: this.clearSelection, html: prompt}));\n            }\n\n            console.log(segments);\n\n            return segments;\n        };\n    }\n\n    /**\n     * @deprecated\n     */\n    testRemove() {\n        this.target.variable = this.prompts['variable'];\n        this.getVariables();\n        this.refresh();\n    }\n\n    getVariables() {\n        let query = this.SQLBuilder.factory({\n            select: ['name'],\n            distinct: true,\n            from: 'variables',\n            where: ['AND', {\n                category: ['=', this.target.category]\n            }],\n            orderBy: ['name']\n        }).compile();\n\n        return this.datasource.executeQuery(query, 'list')\n            .then(this.transformToSegments(this.target.variable, this.prompts['variable']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getDevices() {\n        return this.datasource.findDevices(this.target)\n            .then(this.transformToSegments(this.target.device, this.prompts['device']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getComponents() {\n        return this.datasource.findComponents(this.target)\n            .then(this.transformToSegments(this.target.component, this.prompts['component']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getTagsFacet(index) {\n        return this.datasource.findTagFacets(this.target, index)\n            .then(this.transformToSegments(this.target.tagFacet, this.target.tagFacet));  // do not add \"-- clear selection --\" item\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getTagsWord(index) {\n        return this.datasource.findTagWordsQuery(this.target, index)\n            .then(this.transformToSegments(this.target.tagWord, this.target.tagWord));  // do not add \"-- clear selection --\" item\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalCategory() {\n        if (this.target.category == this.clearSelection) {\n            this.target.category = this.prompts['category'];\n        }\n        // user has changed category, we should erase variable and other selections because they are\n        // not valid anymore\n        this.target.variable = this.prompts['variable'];\n        this.target.device = this.prompts['device'];\n        this.target.component = this.prompts['component'];\n        this.target.tagData = [];\n        // TODO: clear variable name when category changes. Only variable name field in the same target should change,\n        // variable name fields in other targets should not change\n        // FIXME: this does not look right, there must be a way to update element in the browser without manipulating it directly in DOM\n        // angular.element('#variable-field').children().children('a').html(this.target.variable);\n        // call refresh to force graph reload (which should turn blank since we dont have enough data\n        // to build valid query)\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalVariable() {\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalDevice() {\n        if(this.target.device == this.clearSelection) {\n            this.target.device = this.prompts['device'];\n        }\n        this.refresh();\n    }\n    /**\n     * @deprecated\n     */\n    onChangeInternalComponent() {\n        if(this.target.component == this.clearSelection) {\n            this.target.component = this.prompts['component'];\n        }\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalTagFacet(index) {\n        // clear tag word when user changes tag facet. The dialog enters state where tag facet is selected\n        // but tag word is not. This state is invalid and should be transient, it does not make sense\n        // to call this.refresh() because query is yet incomplete\n        this.target.tagData[index].tagWord = this.blankDropDownElement;\n        // TODO: clear field \"tag word\" when \"tag facet\" changes. Only associated tag word should change,\n        // tag word fields in another tag matches in the same target or other targets should not change.\n        // FIXME: this does not look right, there must be a way to update element in the browser without manipulating it directly in DOM\n        // angular.element('#tag-word-'+index).children().children(\"a.tag-word\").html(this.target.tagData[index].tagWord);\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    //noinspection JSUnusedLocalSymbols\n    onChangeInternalTagWord(index) {\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    tagOperation(index, operation) {\n        this.target.tagData[index].tagOperation = operation;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setSortByEl(sortOrder) {\n        this.target.sortByEl = sortOrder;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setSelector(element) {\n        this.target.selector = element;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setAggregator(element) {\n        this.target.aggregator = element;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setAlias() {\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setFormat(element, elementDisplayStr) {\n        this.target.format = element;\n        this.target.formatDisplay = elementDisplayStr;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setColumns() {\n        // console.log(this.target.columns);\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    // setGroup() {\n    //     if (this.target.group == '') {\n    //         if(this.tempNew !== ''){\n    //             this.target.group = this.tempNew;\n    //         }\n    //         else {\n    //             this.target.group = 'select group';\n    //         }\n    //     }\n    //     this.refresh();\n    // }\n\n\n\n    //////////////////////////////////////////////////\n    //////////////////////////////////////////////////\n    //////////////////_NEW_/////////////////////\n\n\n    onChangeNsgQl() {\n        this.buildNsgQLString({type: 'string'});\n        this.refresh();\n    }\n\n    toggleEditorMode() {\n        this.rowMode = !this.rowMode;\n    }\n\n    getCollapsedText() {\n        return this.target.customNsgqlQuery;\n    }\n\n    onFromChange() {\n        if( this.target.category !== this.category  && this.variable != this.prompts['variable']) {\n            console.log(111);\n            this.target.category = this.category;\n            this.variable = this.prompts['variable'];\n            this.onSelectChange();\n            return;\n        }\n\n        this.target.category = this.category;\n    }\n    onSelectChange() {\n        this.target.variable = this.variable;\n        this.target.queryConfig.select(['time','metric']);\n        this.target.queryConfig.from(this.variable);\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    onLimitChange() {\n        if( this.limit ) {\n            this.target.queryConfig.limit(this.limit);\n        } else {\n            this.target.queryConfig.clearLimit();\n        }\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    onGroupByTypeChange() {\n        //TODO: fix this behavior\n        this.groupBy.val = this.prompts['groupByVal'];\n\n        if( this.groupBy.type === 'select type' ) {\n            this.target.queryConfig.clearGroupBy();\n            this.buildNsgQLString();\n            this.refresh();\n        }\n    }\n\n    onGroupByChange() {\n        if( this.groupBy.type === 'time' ) {\n            this.target.queryConfig.groupBy(`time(${this.groupBy.val})`);\n        }\n        if( this.groupBy.type === 'column' ) {\n            this.target.queryConfig.groupBy(this.groupBy.val);\n        }\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    getGroupByVariables() {\n        if( this.groupBy.type === 'time' ) {\n            let groupByTimeOptions = [\n                this.uiSegmentSrv.newSegment('1s'),\n                this.uiSegmentSrv.newSegment('1m'),\n                this.uiSegmentSrv.newSegment('30m'),\n                this.uiSegmentSrv.newSegment('1h'),\n                this.uiSegmentSrv.newSegment('1d')\n            ];\n            return this.$q.when(groupByTimeOptions);\n        }\n\n        if( this.groupBy.type === 'column' ) {\n            let query = this.SQLBuilder.factory({\n                select: ['tagFacet'],\n                distinct: true,\n                from: this.variable,\n                orderBy: ['tagFacet']\n            }).compile();\n\n            return this.datasource.executeQuery(query, 'list')\n                .then(this.transformToSegments(this.groupBy.val, 'select group'));\n        }\n    }\n\n\n    getTagsOrValues(segment, index) {\n        console.log(segment, index);\n        let format = 'list';\n\n        if (segment.type === 'condition') {\n            return this.$q.when([this.uiSegmentSrv.newSegment('AND'), this.uiSegmentSrv.newSegment('OR')]);\n        }\n        if (segment.type === 'operator') {\n            var nextValue = this.tagSegments[index+1].value;\n            return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<>', '<', '>','REGEXP','NOT REGEXP']));\n        }\n\n        let nsgql, addTemplateVars;\n        if (segment.type === 'key' || segment.type === 'plus-button') {\n            nsgql = this.SQLBuilder.factory({\n                select: ['tagFacet'],\n                distinct: true,\n                from: this.variable,\n                orderBy: ['tagFacet']\n            }).compile();\n\n            addTemplateVars = false;\n        } else if (segment.type === 'value')  {\n            let queryObj;\n\n            queryObj = {\n                select: [this.tagSegments[index-2].value],\n                distinct: true,\n                from: 'devices',\n                where: {},\n                orderBy: [this.tagSegments[index-2].value]\n            };\n            queryObj.where[this.tagSegments[index-2].value] = ['NOTNULL'];\n\n            nsgql = this.SQLBuilder.factory(queryObj).compile();\n\n            addTemplateVars = true;\n        }\n\n        return this.datasource.executeQuery(nsgql, format)\n            .then(this.transformToWhereSegments(addTemplateVars))\n            .then(results => {\n                if (segment.type === 'key') {\n                    results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n                }\n                return results;\n            });\n    }\n\n    transformToWhereSegments(addTemplateVars) {\n        return (results) => {\n            console.log(results);\n            var segments = _.map(results, segment => {\n                return this.uiSegmentSrv.newSegment({ value: `${segment}` });\n            });\n\n            if (addTemplateVars) {\n                for (let variable of this.templateSrv.variables) {\n                    segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: '/^$' + variable.name + '$/', expandable: true }));\n                }\n            }\n\n            return segments;\n        };\n    }\n\n    tagSegmentUpdated(segment, index) {\n        this.tagSegments[index] = segment;\n\n        // handle remove tag condition\n        console.log(this.removeTagFilterSegment.value);\n        console.log(segment);\n        if (segment.value === this.removeTagFilterSegment.value) {\n            this.tagSegments.splice(index, 3);\n            if (this.tagSegments.length === 0) {\n                this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n            } else if (this.tagSegments.length > 2) {\n                this.tagSegments.splice(Math.max(index-1, 0), 1);\n                if (this.tagSegments[this.tagSegments.length-1].type !== 'plus-button') {\n                    this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n                }\n            }\n        } else {\n            if (segment.type === 'plus-button') {\n                if (index > 2) {\n                    this.tagSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n                }\n                this.tagSegments.push(this.uiSegmentSrv.newOperator('='));\n                this.tagSegments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));\n                segment.type = 'key';\n                segment.cssClass = 'query-segment-key';\n            }\n\n            if ((index+1) === this.tagSegments.length) {\n                this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n            }\n        }\n\n        this.rebuildTargetTagConditions();\n    }\n\n    rebuildTargetTagConditions() {\n        var tags = [];\n        var tagIndex = 0;\n        var tagOperator = \"\";\n\n        console.log(this.tagSegments);\n\n        _.each(this.tagSegments, (segment2, index) => {\n            if (segment2.type === 'key') {\n                if (tags.length === 0) {\n                    tags.push({});\n                }\n                tags[tagIndex].key = segment2.value;\n            } else if (segment2.type === 'value') {\n                tagOperator = tags[tagIndex].operator;\n                if (tagOperator) {\n                    this.tagSegments[index-1] = this.uiSegmentSrv.newOperator(tagOperator);\n                    tags[tagIndex].operator = tagOperator;\n                }\n                tags[tagIndex].value = segment2.value;\n            } else if (segment2.type === 'condition') {\n                tags.push({ condition: segment2.value });\n                tagIndex += 1;\n            } else if (segment2.type === 'operator') {\n                tags[tagIndex].operator = segment2.value;\n            }\n        });\n\n        this.target.tags = tags;\n\n        this.queryConfigWhere.push(this._buildTagsWhere('tags', this.target.tags));\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    _buildTagsWhere(name, tagsList) {\n        let result = [];\n\n        if(tagsList.length) {\n            tagsList.forEach( (tag, i) => {\n                let obj = {};\n                obj[tag.key] = [tag.operator, tag.value];\n\n                if(tag.condition) {\n                    result.push(tag.condition);\n                }\n                result.push(obj);\n            })\n        }\n\n        if( result.length ) {\n            result.unshift('AND');\n        }\n\n        return result;\n    }\n\n    buildNsgQLString(params = {}) {\n        let str;\n\n        if( params.type == 'string' ) {\n            str = this.target.customNsgqlQuery;\n        }\n\n        if( params.type != 'string' ) {\n            this.queryConfigWhere.push('$_timeFilter'); //GROUP BY time($__interval)\n            this.target.queryConfig.where( this.queryConfigWhere );\n\n            str = this.target.queryConfig.compile();\n        }\n\n        console.log('%cNsgQLString', 'color: blueviolet; font-weight: bold;', str);\n        this.target.customNsgqlQuery = str;\n    };\n}\n\nNetSpyGlassDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}