{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","SQLBuilderFactory","_","NetSpyGlassDatasourceQueryCtrl","$scope","$injector","templateSrv","$q","uiSegmentSrv","prompts","scope","injector","clearSelection","blankDropDownElement","target","category","variable","device","component","sortByEl","selector","aggregator","limit","group","tagFacet","tagOperation","tagWord","tagData","format","formatDisplay","columns","alias","SQLBuilder","queryConfig","factory","customNsgqlQuery","queryConfigWhere","rowMode","tagSegments","push","newPlusButton","removeTagFilterSegment","newSegment","fake","value","length","refresh","index","splice","query","select","distinct","from","where","orderBy","compile","datasource","executeQuery","then","transformToSegments","currentValue","prompt","console","log","results","segments","map","segment","text","expandable","unshift","html","getVariables","findDevices","findComponents","findTagFacets","findTagWordsQuery","rawQuery","needToBuildQuery","operation","sortOrder","element","elementDisplayStr","buildNsgQLString","type","onSelectChange","when","nextValue","newOperators","nsgql","addTemplateVars","queryObj","transformToWhereSegments","angular","copy","variables","name","Math","max","newCondition","newOperator","newFake","cssClass","rebuildTargetTagConditions","tags","tagIndex","tagOperator","each","segment2","key","operator","condition","_buildTagsWhere","tagsList","result","forEach","tag","i","obj","params","str","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["/*\n * Copyright (c) 2016.  Happy Gears, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\nimport SQLBuilderFactory from './hg-sql-builder';\nimport _ from \"lodash\";\n\nexport class NetSpyGlassDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector, templateSrv, $q, uiSegmentSrv) {\n        super($scope, $injector);\n\n        this.prompts = {\n            'category': 'select category',\n            'variable': 'select variable',\n            'device': 'select device',\n            'component': 'select component'\n        };\n\n        this.scope = $scope;\n        this.injector = $injector;\n\n        this.templateSrv = templateSrv;\n        this.$q = $q;\n        this.uiSegmentSrv = uiSegmentSrv;\n\n        this.clearSelection = '-- clear selection --';\n        this.blankDropDownElement = '---';\n        this.target.category = this.target.category || this.prompts['category'];\n        this.target.variable = this.target.variable || this.prompts['variable'];\n        this.target.device = this.target.device || this.prompts['device'];\n        this.target.component = this.target.component || this.prompts['component'];\n        this.target.sortByEl = this.target.sortByEl || 'none';\n        this.target.selector = this.target.selector || ' -- ';\n        this.target.aggregator = this.target.aggregator || ' -- ';\n        this.target.limit = this.target.limit || '100';\n        this.target.group = this.target.group || 'select group';\n        this.target.tagFacet = this.target.tagFacet || this.blankDropDownElement;\n        this.target.tagOperation = this.target.tagOperation || '==';\n        this.target.tagWord = this.target.tagWord || this.blankDropDownElement;\n        this.target.tagData = this.target.tagData || [];\n\n        this.target.format = this.target.format || 'time_series';\n        this.target.formatDisplay = this.target.formatDisplay || 'Time Series';\n\n        this.target.columns = this.target.columns || 'time,variable,device,component,metric';\n        this.target.alias = this.target.alias || '';\n\n\n        // _NEW_\n        this.SQLBuilder = new SQLBuilderFactory();\n        this.target.queryConfig = this.SQLBuilder.factory();\n        this.target.customNsgqlQuery = '';\n\n        this.queryConfigWhere = ['AND'];\n        this.rowMode = false;\n\n        this.category = this.target.category || this.prompts['category'];\n        this.variable = this.target.variable || this.prompts['variable'];\n\n        this.tagSegments = [];\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n        this.removeTagFilterSegment = uiSegmentSrv.newSegment({fake: true, value: '-- remove tag filter --'});\n    }\n\n    /**\n     * @deprecated\n     */\n    isCategorySelected() {\n        return this.target.category !== this.prompts['category'] && this.target.category !== this.clearSelection;\n    }\n\n    /**\n     * @deprecated\n     */\n    isVariableSelected() {\n        return this.target.variable !== this.prompts['variable'] && this.target.variable !== this.clearSelection;\n    }\n\n    /**\n     * add new tag matching rule that consists of tag facet, operation ('==' or '<>') and tag word.\n     * Unfortunately if input fields for the tag facet and word are blank, the height of the corresponding\n     * visible element is reduced (element <a> is visible and its height is 0 when it has no contents, so\n     * all we see is the margin around it). To work around that I put \"-\" in these fields. It is unobtrusive\n     * enough and looks like some sort of a prompt, but it is a hack nonetheless.\n     * FIXME: find a way to fix height of the visible element without adding any contents.\n     */\n    /**\n     * @deprecated\n     */\n    tagDataAdd() {\n        this.target.tagData[this.target.tagData.length] = {\n            tagFacet : this.blankDropDownElement,\n            tagWord : this.blankDropDownElement,\n            tagOperation : '=='\n        };\n        this.refresh();\n    }\n    /**\n     * @deprecated\n     */\n    tagDataRemove(index) {\n        this.target.tagData.splice(index,1);\n        this.refresh();\n    }\n\n    getCategories() {\n        let query = this.SQLBuilder.factory({\n            select: ['category'],\n            distinct: true,\n            from: 'variables',\n            where: ['AND', {\n                category: ['<>', '']\n            }],\n            orderBy: ['category']\n        }).compile();\n        //\n        // return this.datasource.executeQuery(this.SQLBuilder.factory({\n        //     select: ['category,name'],\n        //     distinct: true,\n        //     from: 'variables',\n        //     where: ['AND', {\n        //         category: ['<>', '']\n        //     }],\n        //     orderBy: ['category']\n        // }).compile(), 'json')\n        //     .then( (data) => {\n        //         console.log('category,name',data);\n        //         // this.transformToSegments(this.target.category, this.prompts['category'])\n        //\n        //         return [\n        //             this.uiSegmentSrv.newSegment({ value: 'test1', expandable: true }),\n        //             this.uiSegmentSrv.newSegment({ value: 'test2', expandable: false }),\n        //             this.uiSegmentSrv.newSegment({ value: 'test3', expandable: false }),\n        //         ]\n        //     });\n\n\n        return this.datasource.executeQuery(query, 'list')\n            .then(this.transformToSegments(this.target.category, this.prompts['category']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    transformToSegments(currentValue, prompt) {\n        console.log('transformToSegments called:  currentValue=' + currentValue + ' prompt=' + prompt);\n        return (results) => {\n            var segments = _.map(results, segment => {\n                //TODO: really we need to ckeck segment.text if all request types will be 'list'\n                if( segment.text ) {\n                    return this.uiSegmentSrv.newSegment({ value: segment.text, expandable: segment.expandable });\n                } else {\n                    return this.uiSegmentSrv.newSegment({ value: segment });\n                }\n            });\n            // segments.unshift(this.uiSegmentSrv.newSegment({ fake: true, value: this.clearSelection, html: prompt}));\n\n            // there is no need to add \"clear selection\" item if current value is already equal to prompt\n            if (currentValue !== prompt) {\n                segments.unshift(this.uiSegmentSrv.newSegment({ fake: true, value: this.clearSelection, html: prompt}));\n            }\n\n            return segments;\n        };\n    }\n\n    /**\n     * @deprecated\n     */\n    testRemove() {\n        this.target.variable = this.prompts['variable'];\n        this.getVariables();\n        this.refresh();\n    }\n\n    getVariables() {\n        let query = this.SQLBuilder.factory({\n            select: ['name'],\n            distinct: true,\n            from: 'variables',\n            where: ['AND', {\n                category: ['=', this.target.category]\n            }],\n            orderBy: ['name']\n        }).compile();\n\n        return this.datasource.executeQuery(query, 'list')\n            .then(this.transformToSegments(this.target.variable, this.prompts['variable']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getDevices() {\n        return this.datasource.findDevices(this.target)\n            .then(this.transformToSegments(this.target.device, this.prompts['device']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getComponents() {\n        return this.datasource.findComponents(this.target)\n            .then(this.transformToSegments(this.target.component, this.prompts['component']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getTagsFacet(index) {\n        return this.datasource.findTagFacets(this.target, index)\n            .then(this.transformToSegments(this.target.tagFacet, this.target.tagFacet));  // do not add \"-- clear selection --\" item\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getTagsWord(index) {\n        return this.datasource.findTagWordsQuery(this.target, index)\n            .then(this.transformToSegments(this.target.tagWord, this.target.tagWord));  // do not add \"-- clear selection --\" item\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalCategory() {\n        if (this.target.category == this.clearSelection) {\n            this.target.category = this.prompts['category'];\n        }\n        // user has changed category, we should erase variable and other selections because they are\n        // not valid anymore\n        this.target.variable = this.prompts['variable'];\n        this.target.device = this.prompts['device'];\n        this.target.component = this.prompts['component'];\n        this.target.tagData = [];\n        // TODO: clear variable name when category changes. Only variable name field in the same target should change,\n        // variable name fields in other targets should not change\n        // FIXME: this does not look right, there must be a way to update element in the browser without manipulating it directly in DOM\n        // angular.element('#variable-field').children().children('a').html(this.target.variable);\n        // call refresh to force graph reload (which should turn blank since we dont have enough data\n        // to build valid query)\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalVariable() {\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalDevice() {\n        if(this.target.device == this.clearSelection) {\n            this.target.device = this.prompts['device'];\n        }\n        this.refresh();\n    }\n    /**\n     * @deprecated\n     */\n    onChangeInternalComponent() {\n        if(this.target.component == this.clearSelection) {\n            this.target.component = this.prompts['component'];\n        }\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalTagFacet(index) {\n        // clear tag word when user changes tag facet. The dialog enters state where tag facet is selected\n        // but tag word is not. This state is invalid and should be transient, it does not make sense\n        // to call this.refresh() because query is yet incomplete\n        this.target.tagData[index].tagWord = this.blankDropDownElement;\n        // TODO: clear field \"tag word\" when \"tag facet\" changes. Only associated tag word should change,\n        // tag word fields in another tag matches in the same target or other targets should not change.\n        // FIXME: this does not look right, there must be a way to update element in the browser without manipulating it directly in DOM\n        // angular.element('#tag-word-'+index).children().children(\"a.tag-word\").html(this.target.tagData[index].tagWord);\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    //noinspection JSUnusedLocalSymbols\n    onChangeInternalTagWord(index) {\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    tagOperation(index, operation) {\n        this.target.tagData[index].tagOperation = operation;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setSortByEl(sortOrder) {\n        this.target.sortByEl = sortOrder;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setSelector(element) {\n        this.target.selector = element;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setAggregator(element) {\n        this.target.aggregator = element;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setAlias() {\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setFormat(element, elementDisplayStr) {\n        this.target.format = element;\n        this.target.formatDisplay = elementDisplayStr;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setColumns() {\n        // console.log(this.target.columns);\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    // setGroup() {\n    //     if (this.target.group == '') {\n    //         if(this.tempNew !== ''){\n    //             this.target.group = this.tempNew;\n    //         }\n    //         else {\n    //             this.target.group = 'select group';\n    //         }\n    //     }\n    //     this.refresh();\n    // }\n\n\n\n    //////////////////////////////////////////////////\n    //////////////////////////////////////////////////\n    //////////////////_NEW_/////////////////////\n\n\n    onChangeNsgQl() {\n        this.buildNsgQLString({type: 'string'});\n        this.refresh();\n    }\n\n\n    toggleEditorMode() {\n        console.log(11);\n\n        this.rowMode = !this.rowMode;\n    }\n\n    getCollapsedText() {\n        return this.target.customNsgqlQuery;\n    }\n\n    onFromChange() {\n        if( this.target.category !== this.category  && this.variable != this.prompts['variable']) {\n            console.log(111);\n            this.target.category = this.category;\n            this.variable = this.prompts['variable'];\n            this.onSelectChange();\n            return;\n        }\n\n        this.target.category = this.category;\n    }\n    onSelectChange() {\n        this.target.variable = this.variable;\n        this.target.queryConfig.select(['time','metric']);\n        this.target.queryConfig.from(this.variable);\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n\n\n    getTagsOrValues(segment, index) {\n        console.log(segment, index);\n        let format = 'list';\n\n        if (segment.type === 'condition') {\n            return this.$q.when([this.uiSegmentSrv.newSegment('AND'), this.uiSegmentSrv.newSegment('OR')]);\n        }\n        if (segment.type === 'operator') {\n            var nextValue = this.tagSegments[index+1].value;\n            return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<>', '<', '>','REGEXP','NOT REGEXP']));\n        }\n\n        let nsgql, addTemplateVars;\n        if (segment.type === 'key' || segment.type === 'plus-button') {\n            nsgql = this.SQLBuilder.factory({\n                select: ['tagFacet'],\n                from: 'devices',\n                orderBy: ['tagFacet']\n            }).compile();\n\n            addTemplateVars = false;\n        } else if (segment.type === 'value')  {\n            let queryObj;\n\n            queryObj = {\n                select: [this.tagSegments[index-2].value],\n                from: 'devices',\n                where: {},\n                orderBy: [this.tagSegments[index-2].value]\n            };\n            queryObj.where[this.tagSegments[index-2].value] = ['NOTNULL'];\n\n            nsgql = this.SQLBuilder.factory(queryObj).compile();\n\n            addTemplateVars = true;\n        }\n\n        return this.datasource.executeQuery(nsgql, format)\n            .then(this.transformToWhereSegments(addTemplateVars))\n            .then(results => {\n                if (segment.type === 'key') {\n                    results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n                }\n                return results;\n            });\n    }\n\n    transformToWhereSegments(addTemplateVars) {\n        return (results) => {\n            console.log(results);\n            var segments = _.map(results, segment => {\n                return this.uiSegmentSrv.newSegment({ value: `${segment}` });\n            });\n\n            if (addTemplateVars) {\n                for (let variable of this.templateSrv.variables) {\n                    segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: '/^$' + variable.name + '$/', expandable: true }));\n                }\n            }\n\n            return segments;\n        };\n    }\n\n    tagSegmentUpdated(segment, index) {\n        this.tagSegments[index] = segment;\n\n        // handle remove tag condition\n        console.log(this.removeTagFilterSegment.value);\n        console.log(segment);\n        if (segment.value === this.removeTagFilterSegment.value) {\n            this.tagSegments.splice(index, 3);\n            if (this.tagSegments.length === 0) {\n                this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n            } else if (this.tagSegments.length > 2) {\n                this.tagSegments.splice(Math.max(index-1, 0), 1);\n                if (this.tagSegments[this.tagSegments.length-1].type !== 'plus-button') {\n                    this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n                }\n            }\n        } else {\n            if (segment.type === 'plus-button') {\n                if (index > 2) {\n                    this.tagSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n                }\n                this.tagSegments.push(this.uiSegmentSrv.newOperator('='));\n                this.tagSegments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));\n                segment.type = 'key';\n                segment.cssClass = 'query-segment-key';\n            }\n\n            if ((index+1) === this.tagSegments.length) {\n                this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n            }\n        }\n\n        this.rebuildTargetTagConditions();\n    }\n\n    rebuildTargetTagConditions() {\n        var tags = [];\n        var tagIndex = 0;\n        var tagOperator = \"\";\n\n        console.log(this.tagSegments);\n\n        _.each(this.tagSegments, (segment2, index) => {\n            if (segment2.type === 'key') {\n                if (tags.length === 0) {\n                    tags.push({});\n                }\n                tags[tagIndex].key = segment2.value;\n            } else if (segment2.type === 'value') {\n                tagOperator = tags[tagIndex].operator;\n                if (tagOperator) {\n                    this.tagSegments[index-1] = this.uiSegmentSrv.newOperator(tagOperator);\n                    tags[tagIndex].operator = tagOperator;\n                }\n                tags[tagIndex].value = segment2.value;\n            } else if (segment2.type === 'condition') {\n                tags.push({ condition: segment2.value });\n                tagIndex += 1;\n            } else if (segment2.type === 'operator') {\n                tags[tagIndex].operator = segment2.value;\n            }\n        });\n\n        this.target.tags = tags;\n\n        this.queryConfigWhere.push(this._buildTagsWhere('tags', this.target.tags));\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    _buildTagsWhere(name, tagsList) {\n        let result = [];\n\n        if(tagsList.length) {\n            tagsList.forEach( (tag, i) => {\n                let obj = {};\n                obj[tag.key] = [tag.operator, tag.value];\n\n                if(tag.condition) {\n                    result.push(tag.condition);\n                }\n                result.push(obj);\n            })\n        }\n\n        if( result.length ) {\n            result.unshift('AND');\n        }\n\n        return result;\n    }\n\n    buildNsgQLString(params = {}) {\n        let str;\n\n        if( params.type == 'string' ) {\n            str = this.target.customNsgqlQuery;\n        }\n\n        if( params.type != 'string' ) {\n            this.queryConfigWhere.push('$_timeFilter'); //GROUP BY time($__interval)\n            this.target.queryConfig.where( this.queryConfigWhere );\n\n            str = this.target.queryConfig.compile();\n        }\n\n        console.log('%cNsgQLString', 'color: blueviolet; font-weight: bold;', str);\n        this.target.customNsgqlQuery = str;\n    };\n}\n\nNetSpyGlassDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}