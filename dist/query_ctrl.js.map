{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","QueryPrompts","targetDefaults","columns","category","variable","rawQuery","limit","tags","groupBy","type","groupByType","val","NetSpyGlassQueryCtrl","$scope","$injector","uiSegmentSrv","arguments","prompts","options","categories","segments","removeSegment","newSegment","fake","value","removeTag","groupByFormats","panelCtrl","refresh","initTarget","restoreTags","target","datasource","getCategories","then","_","defaultsDeep","format","panel","length","tag","condition","push","newCondition","newKey","key","newOperator","operator","newKeyValue","newPlusButton","execute","nsgqlString","getSQLString","segment","index","$q","get","promise","resolve","getFacets","facets","concat","getSuggestions","newOperators","list","map","item","results","splice","angular","copy","segmentSrv","Math","max","newFake","whereValue","cssClass","rebuildTargetTagConditions","tagIndex","tagOperator","forEach","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["/*\n * Copyright (c) 2017.  Happy Gears, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport {QueryPrompts} from './dictionary';\nimport './css/query-editor.css!'\n\n/**\n * @typedef {{ type: string, cssClass: string }} ISegment\n */\n\nconst targetDefaults = {\n    columns: ['time', 'metric'],\n    category: QueryPrompts.category,\n    variable: QueryPrompts.variable,\n    rawQuery: 0,\n    limit: 100,\n    tags: [],\n    groupBy: {\n        type: QueryPrompts.groupByType,\n        val: QueryPrompts.groupBy\n    }\n};\n\n\nexport class NetSpyGlassQueryCtrl extends QueryCtrl {\n\n    /**\n     * @var {NetSpyGlassDatasource} datasource\n     * @property refresh\n     * @property panelCtrl\n     */\n    constructor($scope, $injector, uiSegmentSrv) {\n        super(...arguments);\n        this.$scope = $scope;\n        this.$injector = $injector;\n        this.prompts = QueryPrompts;\n        this.uiSegmentSrv = uiSegmentSrv;\n\n        this.options = {\n            categories: [],\n\n            segments: [],\n\n            removeSegment: uiSegmentSrv.newSegment({fake: true, value: this.prompts.removeTag}),\n\n            groupByFormats: [],\n\n            groupByType: [QueryPrompts.groupByType, 'time', 'column']\n        };\n    }\n\n    execute() {\n        this.panelCtrl.refresh();\n    }\n\n    init() {\n        this.initTarget();\n\n        this.options.segments = this.restoreTags();\n\n        this.target.groupBy.type = this.options.groupByType[0];\n\n        this.datasource\n            .getCategories()\n            .then((categories) => {\n                this.options.categories = categories;\n            });\n    }\n\n    initTarget() {\n        _.defaultsDeep(\n            this.target, \n            targetDefaults, \n            {format: this.panel.type === 'table' ? 'table' : 'time_series'}\n        );\n    }\n\n    /**\n     * @returns {array}\n     */\n    restoreTags() {\n        const uiSegmentSrv = this.uiSegmentSrv;\n        let segments = [];\n\n        if (this.target.tags.length) {\n            for (let tag of this.target.tags) {\n                if (tag.condition) {\n                    segments.push(uiSegmentSrv.newCondition(tag.condition));\n                }\n\n                segments.push(uiSegmentSrv.newKey(tag.key));\n                segments.push(uiSegmentSrv.newOperator(tag.operator));\n                segments.push(uiSegmentSrv.newKeyValue(tag.value));\n            }\n        }\n\n        segments.push(uiSegmentSrv.newPlusButton());\n\n        return segments;\n    }\n\n    /**\n     * @param {string} category\n     * @param {string} variable\n     */\n    selectCategory(category, variable) {\n        this.target.category = category;\n        this.target.variable = variable;\n        this.execute();\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery ^= 1;\n\n        if( this.target.rawQuery ) {\n            this.target.nsgqlString = this.datasource.getSQLString(this.target);\n        }\n    }\n\n    /**\n     * @param {ISegment} segment\n     * @param {number} index\n     * @returns {Promise}\n     */\n    getTagsOrValues(segment, index) {\n        const $q = this.$injector.get('$q');\n        const uiSegmentSrv = this.uiSegmentSrv;\n        const segments = this.options.segments;\n\n        let promise = $q.resolve([]);\n\n        if (this.target.variable) {\n            switch (segment.type) {\n                case 'key':\n                case 'plus-button':\n                    promise = this.datasource\n                        .getFacets(this.target.variable)\n                        .then((facets) => ['component', 'device'].concat(facets));\n                    break;\n\n                case 'value':\n\n                    promise = this.datasource.getSuggestions({\n                        type: segments[index - 2].value,\n                        variable: this.target.variable,\n                        tags: this.target.tags,\n                    });\n                    break;\n\n                case 'condition':\n                    return $q.resolve([\n                        this.uiSegmentSrv.newCondition('AND'),\n                        this.uiSegmentSrv.newCondition('OR')\n                    ]);\n                    break;\n\n                case 'operator':\n                    return $q.resolve(this.uiSegmentSrv.newOperators([\n                        '=', '!=', '<>', '<', '>', 'REGEXP', 'NOT REGEXP'\n                    ]));\n                    break;\n            }\n        }\n\n        return promise\n            .then((list) => list.map((item) => uiSegmentSrv.newSegment({value: `${item}`})))\n            .then(results => {\n                if (segment.type === 'key') {\n                    results.splice(0, 0, angular.copy(this.options.removeSegment));\n                }\n                return results;\n            });\n    }\n\n    /**\n     * @param {ISegment} segment\n     * @param {number} index\n     */\n    tagSegmentUpdated(segment, index) {\n        const segmentSrv = this.uiSegmentSrv;\n        const segments = this.options.segments;\n        segments[index] = segment;\n\n        // handle remove tag condition\n\n        if (segment.value === this.options.removeSegment.value) {\n            segments.splice(index, 3);\n            if (segments.length === 0) {\n                segments.push(segmentSrv.newPlusButton());\n            } else if (segments.length > 2) {\n                segments.splice(Math.max(index - 1, 0), 1);\n                if (segments[segments.length - 1].type !== 'plus-button') {\n                    segments.push(segmentSrv.newPlusButton());\n                }\n            }\n        } else {\n            if (segment.type === 'plus-button') {\n                if (index > 2) {\n                    segments.splice(index, 0, segmentSrv.newCondition('AND'));\n                }\n\n                segments.push(segmentSrv.newOperator('='));\n                segments.push(segmentSrv.newFake(this.prompts.whereValue, 'value', 'query-segment-value'));\n                segment.type = 'key';\n                segment.cssClass = 'query-segment-key';\n            }\n\n            if ((index + 1) === segments.length) {\n                segments.push(segmentSrv.newPlusButton());\n            }\n        }\n\n        this.rebuildTargetTagConditions();\n    }\n\n    rebuildTargetTagConditions() {\n        const segments = this.options.segments;\n        const tags = [];\n        let tagIndex = 0;\n        let tagOperator = '';\n\n        segments.forEach((segment, index) => {\n            switch (segment.type) {\n                case 'key':\n                    if (tags.length === 0) {\n                        tags.push({});\n                    }\n                    tags[tagIndex].key = segment.value;\n                    break;\n                case 'value':\n                    if (tagOperator = tags[tagIndex].operator) {\n                        segments[index - 1] = this.uiSegmentSrv.newOperator(tagOperator);\n                        tags[tagIndex].operator = tagOperator;\n                    }\n                    tags[tagIndex].value = segment.value;\n                    break;\n                case 'condition':\n                    tags.push({condition: segment.value});\n                    tagIndex += 1;\n                    break;\n                case 'operator':\n                    tags[tagIndex].operator = segment.value;\n                    break;\n            }\n        });\n\n        this.target.tags = tags;\n        this.execute();\n    }\n\n\n}\n\nNetSpyGlassQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}