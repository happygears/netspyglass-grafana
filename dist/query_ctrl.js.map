{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","QueryPrompts","targetDefaults","columns","category","variable","rawQuery","limit","tags","NetSpyGlassQueryCtrl","$scope","$injector","uiSegmentSrv","arguments","prompts","options","isGraph","panel","type","isTable","categories","segments","removeSegment","newSegment","fake","value","removeTag","panelCtrl","refresh","initTarget","restoreTags","datasource","getCategories","then","_","defaultsDeep","target","format","length","tag","condition","push","newCondition","newKey","key","newOperator","operator","newKeyValue","newPlusButton","execute","segment","index","$q","get","promise","resolve","getFacets","facets","concat","getSuggestions","newOperators","list","map","item","results","splice","angular","copy","removeTagFilterSegment","segmentSrv","Math","max","newFake","whereValue","cssClass","rebuildTargetTagConditions","tagIndex","tagOperator","forEach","clearSelection","html","orderBy","text","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBQA,qB,kBAAAA,S;;AACAC,wB,eAAAA,Y;;;;;;;;;;;;;;;;;;;;;AAOFC,0B,GAAiB;AACnBC,yBAAS,CAAC,MAAD,EAAS,QAAT,CADU;AAEnBC,0BAAUH,aAAaG,QAFJ;AAGnBC,0BAAUJ,aAAaI,QAHJ;AAInBC,0BAAU,CAJS;AAKnBC,uBAAO,CALY;AAMnBC,sBAAM;AANa,a;;4CASVC,oB;;;AAET;;;;;AAKA,8CAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,YAA/B,EAA6C;AAAA;;AAAA,6JAChCC,SADgC;;AAEzC,0BAAKH,MAAL,GAAcA,MAAd;AACA,0BAAKC,SAAL,GAAiBA,SAAjB;AACA,0BAAKG,OAAL,GAAeb,YAAf;AACA,0BAAKW,YAAL,GAAoBA,YAApB;;AAEA,0BAAKG,OAAL,GAAe;AACXC,iCAAS,MAAKC,KAAL,CAAWC,IAAX,KAAoB,OADlB;AAEXC,iCAAS,MAAKF,KAAL,CAAWC,IAAX,KAAoB,OAFlB;AAGXE,oCAAY,EAHD;AAIXC,kCAAU,EAJC;AAKXC,uCAAeV,aAAaW,UAAb,CAAwB,EAACC,MAAM,IAAP,EAAaC,OAAO,MAAKX,OAAL,CAAaY,SAAjC,EAAxB;AALJ,qBAAf;AAPyC;AAc5C;;;;8CAES;AACN,6BAAKC,SAAL,CAAeC,OAAf;AACH;;;2CAEM;AAAA;;AACH,6BAAKC,UAAL;AACA,6BAAKd,OAAL,CAAaM,QAAb,GAAwB,KAAKS,WAAL,EAAxB;AACA,6BAAKC,UAAL,CACKC,aADL,GAEKC,IAFL,CAEU,UAACb,UAAD,EAAgB;AAClB,mCAAKL,OAAL,CAAaK,UAAb,GAA0BA,UAA1B;AACH,yBAJL;AAKH;;;iDAEY;AACTc,0BAAEC,YAAF,CACI,KAAKC,MADT,EAEIlC,cAFJ,EAGI,EAACmC,QAAQ,KAAKtB,OAAL,CAAaC,OAAb,GAAuB,aAAvB,GAAuC,OAAhD,EAHJ;AAKH;;;kDAKa;AACV,4BAAMJ,eAAe,KAAKA,YAA1B;AACA,4BAAIS,WAAW,EAAf;;AAEA,4BAAI,KAAKe,MAAL,CAAY5B,IAAZ,CAAiB8B,MAArB,EAA6B;AAAA;AAAA;AAAA;;AAAA;AACzB,qDAAgB,KAAKF,MAAL,CAAY5B,IAA5B,8HAAkC;AAAA,wCAAzB+B,GAAyB;;AAC9B,wCAAIA,IAAIC,SAAR,EAAmB;AACfnB,iDAASoB,IAAT,CAAc7B,aAAa8B,YAAb,CAA0BH,IAAIC,SAA9B,CAAd;AACH;;AAEDnB,6CAASoB,IAAT,CAAc7B,aAAa+B,MAAb,CAAoBJ,IAAIK,GAAxB,CAAd;AACAvB,6CAASoB,IAAT,CAAc7B,aAAaiC,WAAb,CAAyBN,IAAIO,QAA7B,CAAd;AACAzB,6CAASoB,IAAT,CAAc7B,aAAamC,WAAb,CAAyBR,IAAId,KAA7B,CAAd;AACH;AATwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAU5B;;AAEDJ,iCAASoB,IAAT,CAAc7B,aAAaoC,aAAb,EAAd;;AAEA,+BAAO3B,QAAP;AACH;;;qDAMgBjB,Q,EAAUC,Q,EAAU;AACjC,6BAAK+B,MAAL,CAAYhC,QAAZ,GAAuBA,QAAvB;AACA,6BAAKgC,MAAL,CAAY/B,QAAZ,GAAuBA,QAAvB;AACA,6BAAK4C,OAAL;AACH;;;uDAEkB;AACf,6BAAKb,MAAL,CAAY9B,QAAZ,IAAwB,CAAxB;AACH;;;oDAOe4C,O,EAASC,K,EAAO;AAAA;;AAC5B,4BAAMC,KAAK,KAAKzC,SAAL,CAAe0C,GAAf,CAAmB,IAAnB,CAAX;AACA,4BAAMzC,eAAe,KAAKA,YAA1B;AACA,4BAAMS,WAAW,KAAKN,OAAL,CAAaM,QAA9B;;AAEA,4BAAIiC,UAAUF,GAAGG,OAAH,CAAW,EAAX,CAAd;;AAEA,4BAAI,KAAKnB,MAAL,CAAY/B,QAAhB,EAA0B;AACtB,oCAAQ6C,QAAQhC,IAAhB;AACI,qCAAK,KAAL;AACA,qCAAK,aAAL;AACIoC,8CAAU,KAAKvB,UAAL,CACLyB,SADK,CACK,KAAKpB,MAAL,CAAY/B,QADjB,EAEL4B,IAFK,CAEA,UAACwB,MAAD;AAAA,+CAAY,CAAC,WAAD,EAAc,QAAd,EAAwBC,MAAxB,CAA+BD,MAA/B,CAAZ;AAAA,qCAFA,CAAV;AAGA;;AAEJ,qCAAK,OAAL;;AAEIH,8CAAU,KAAKvB,UAAL,CAAgB4B,cAAhB,CAA+B;AACrCzC,8CAAMG,SAAS8B,QAAQ,CAAjB,EAAoB1B,KADW;AAErCpB,kDAAU,KAAK+B,MAAL,CAAY/B,QAFe;AAGrCG,8CAAM,KAAK4B,MAAL,CAAY5B;AAHmB,qCAA/B,CAAV;AAKA;;AAEJ,qCAAK,WAAL;AACI,2CAAO4C,GAAGG,OAAH,CAAW,CACd,KAAK3C,YAAL,CAAkB8B,YAAlB,CAA+B,KAA/B,CADc,EAEd,KAAK9B,YAAL,CAAkB8B,YAAlB,CAA+B,IAA/B,CAFc,CAAX,CAAP;AAIA;;AAEJ,qCAAK,UAAL;AACI,2CAAOU,GAAGG,OAAH,CAAW,KAAK3C,YAAL,CAAkBgD,YAAlB,CAA+B,CAC7C,GAD6C,EACxC,IADwC,EAClC,IADkC,EAC5B,GAD4B,EACvB,GADuB,EAClB,QADkB,EACR,YADQ,CAA/B,CAAX,CAAP;AAGA;AA5BR;AA8BH;;AAED,+BAAON,QACFrB,IADE,CACG,UAAC4B,IAAD;AAAA,mCAAUA,KAAKC,GAAL,CAAS,UAACC,IAAD;AAAA,uCAAUnD,aAAaW,UAAb,CAAwB,EAACE,YAAUsC,IAAX,EAAxB,CAAV;AAAA,6BAAT,CAAV;AAAA,yBADH,EAEF9B,IAFE,CAEG,mBAAW;AACb,gCAAIiB,QAAQhC,IAAR,KAAiB,KAArB,EAA4B;AACxB8C,wCAAQC,MAAR,CAAe,CAAf,EAAkB,CAAlB,EAAqBC,QAAQC,IAAR,CAAa,OAAKC,sBAAlB,CAArB;AACH;AACD,mCAAOJ,OAAP;AACH,yBAPE,CAAP;AAQH;;;sDAMiBd,O,EAASC,K,EAAO;AAC9B,4BAAMkB,aAAa,KAAKzD,YAAxB;AACA,4BAAMS,WAAW,KAAKN,OAAL,CAAaM,QAA9B;AACAA,iCAAS8B,KAAT,IAAkBD,OAAlB;;AAEA;;AAEA,4BAAIA,QAAQzB,KAAR,KAAkB,KAAKV,OAAL,CAAaO,aAAb,CAA2BG,KAAjD,EAAwD;AACpDJ,qCAAS4C,MAAT,CAAgBd,KAAhB,EAAuB,CAAvB;AACA,gCAAI9B,SAASiB,MAAT,KAAoB,CAAxB,EAA2B;AACvBjB,yCAASoB,IAAT,CAAc4B,WAAWrB,aAAX,EAAd;AACH,6BAFD,MAEO,IAAI3B,SAASiB,MAAT,GAAkB,CAAtB,EAAyB;AAC5BjB,yCAAS4C,MAAT,CAAgBK,KAAKC,GAAL,CAASpB,QAAQ,CAAjB,EAAoB,CAApB,CAAhB,EAAwC,CAAxC;AACA,oCAAI9B,SAASA,SAASiB,MAAT,GAAkB,CAA3B,EAA8BpB,IAA9B,KAAuC,aAA3C,EAA0D;AACtDG,6CAASoB,IAAT,CAAc4B,WAAWrB,aAAX,EAAd;AACH;AACJ;AACJ,yBAVD,MAUO;AACH,gCAAIE,QAAQhC,IAAR,KAAiB,aAArB,EAAoC;AAChC,oCAAIiC,QAAQ,CAAZ,EAAe;AACX9B,6CAAS4C,MAAT,CAAgBd,KAAhB,EAAuB,CAAvB,EAA0BkB,WAAW3B,YAAX,CAAwB,KAAxB,CAA1B;AACH;;AAEDrB,yCAASoB,IAAT,CAAc4B,WAAWxB,WAAX,CAAuB,GAAvB,CAAd;AACAxB,yCAASoB,IAAT,CAAc4B,WAAWG,OAAX,CAAmB,KAAK1D,OAAL,CAAa2D,UAAhC,EAA4C,OAA5C,EAAqD,qBAArD,CAAd;AACAvB,wCAAQhC,IAAR,GAAe,KAAf;AACAgC,wCAAQwB,QAAR,GAAmB,mBAAnB;AACH;;AAED,gCAAKvB,QAAQ,CAAT,KAAgB9B,SAASiB,MAA7B,EAAqC;AACjCjB,yCAASoB,IAAT,CAAc4B,WAAWrB,aAAX,EAAd;AACH;AACJ;;AAED,6BAAK2B,0BAAL;AACH;;;iEAE4B;AAAA;;AACzB,4BAAMtD,WAAW,KAAKN,OAAL,CAAaM,QAA9B;AACA,4BAAMb,OAAO,EAAb;AACA,4BAAIoE,WAAW,CAAf;AACA,4BAAIC,cAAc,EAAlB;;AAEAxD,iCAASyD,OAAT,CAAiB,UAAC5B,OAAD,EAAUC,KAAV,EAAoB;AACjC,oCAAQD,QAAQhC,IAAhB;AACI,qCAAK,KAAL;AACI,wCAAIV,KAAK8B,MAAL,KAAgB,CAApB,EAAuB;AACnB9B,6CAAKiC,IAAL,CAAU,EAAV;AACH;AACDjC,yCAAKoE,QAAL,EAAehC,GAAf,GAAqBM,QAAQzB,KAA7B;AACA;AACJ,qCAAK,OAAL;AACI,wCAAIoD,cAAcrE,KAAKoE,QAAL,EAAe9B,QAAjC,EAA2C;AACvCzB,iDAAS8B,QAAQ,CAAjB,IAAsB,OAAKvC,YAAL,CAAkBiC,WAAlB,CAA8BgC,WAA9B,CAAtB;AACArE,6CAAKoE,QAAL,EAAe9B,QAAf,GAA0B+B,WAA1B;AACH;AACDrE,yCAAKoE,QAAL,EAAenD,KAAf,GAAuByB,QAAQzB,KAA/B;AACA;AACJ,qCAAK,WAAL;AACIjB,yCAAKiC,IAAL,CAAU,EAACD,WAAWU,QAAQzB,KAApB,EAAV;AACAmD,gDAAY,CAAZ;AACA;AACJ,qCAAK,UAAL;AACIpE,yCAAKoE,QAAL,EAAe9B,QAAf,GAA0BI,QAAQzB,KAAlC;AACA;AApBR;AAsBH,yBAvBD;;AAyBA,6BAAKW,MAAL,CAAY5B,IAAZ,GAAmBA,IAAnB;AACA,6BAAKyC,OAAL;AACH;;;wDAEmB;AAChB,4BAAMY,OAAO,CACT,KAAKjD,YAAL,CAAkBW,UAAlB,CAA6B;AACzBC,kCAAM,IADmB;AAEzBC,mCAAO,KAAKX,OAAL,CAAaiE,cAFK;AAGzBC,kCAAM,KAAKlE,OAAL,CAAamE;AAHM,yBAA7B,CADS,CAAb;;AAQA,4BAAI,KAAKlE,OAAL,CAAaC,OAAjB,EAA0B;AACtB6C,iCAAKpB,IAAL,CAAU,KAAK7B,YAAL,CAAkBW,UAAlB,CAA6B,QAA7B,CAAV;AACH,yBAFD,MAEO,IAAI,KAAKR,OAAL,CAAaI,OAAjB,EAA0B;AAC7B;AACI;AACJ;AACH;;AAED,+BAAO,KAAKR,SAAL,CAAe0C,GAAf,CAAmB,IAAnB,EAAyBE,OAAzB,CAAiCM,IAAjC,CAAP;AACH;;;sDAEiB;AACd,+BAAO,KAAKlD,SAAL,CAAe0C,GAAf,CAAmB,IAAnB,EAAyBE,OAAzB,CAAiC,CACpC,EAAC2B,MAAM,GAAP,EAAY,SAAS,CAArB,EADoC,EAEpC,EAACA,MAAM,GAAP,EAAY,SAAS,CAArB,EAFoC,EAGpC,EAACA,MAAM,IAAP,EAAa,SAAS,EAAtB,EAHoC,EAIpC,EAACA,MAAM,IAAP,EAAa,SAAS,EAAtB,EAJoC,EAKpC,EAACA,MAAM,KAAP,EAAc,SAAS,GAAvB,EALoC,CAAjC,CAAP;AAOH;;;;cAlPqClF,S;;;;AAqP1CS,iCAAqB0E,WAArB,GAAmC,4BAAnC","file":"query_ctrl.js","sourcesContent":["/*\n * Copyright (c) 2017.  Happy Gears, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport {QueryPrompts} from './dictionary';\nimport './css/query-editor.css!'\n\n/**\n * @typedef {{ type: string, cssClass: string }} ISegment\n */\n\nconst targetDefaults = {\n    columns: ['time', 'metric'],\n    category: QueryPrompts.category,\n    variable: QueryPrompts.variable,\n    rawQuery: 0,\n    limit: 5,\n    tags: []\n};\n\nexport class NetSpyGlassQueryCtrl extends QueryCtrl {\n\n    /**\n     * @var {NetSpyGlassDatasource} datasource\n     * @property refresh\n     * @property panelCtrl\n     */\n    constructor($scope, $injector, uiSegmentSrv) {\n        super(...arguments);\n        this.$scope = $scope;\n        this.$injector = $injector;\n        this.prompts = QueryPrompts;\n        this.uiSegmentSrv = uiSegmentSrv;\n\n        this.options = {\n            isGraph: this.panel.type === 'graph',\n            isTable: this.panel.type === 'table',\n            categories: [],\n            segments: [],\n            removeSegment: uiSegmentSrv.newSegment({fake: true, value: this.prompts.removeTag})\n        };\n    }\n\n    execute() {\n        this.panelCtrl.refresh();\n    }\n\n    init() {\n        this.initTarget();\n        this.options.segments = this.restoreTags();\n        this.datasource\n            .getCategories()\n            .then((categories) => {\n                this.options.categories = categories;\n            });\n    }\n\n    initTarget() {\n        _.defaultsDeep(\n            this.target, \n            targetDefaults, \n            {format: this.options.isGraph ? 'time_series' : 'table'}\n        );\n    }\n\n    /**\n     * @returns {array}\n     */\n    restoreTags() {\n        const uiSegmentSrv = this.uiSegmentSrv;\n        let segments = [];\n\n        if (this.target.tags.length) {\n            for (let tag of this.target.tags) {\n                if (tag.condition) {\n                    segments.push(uiSegmentSrv.newCondition(tag.condition));\n                }\n\n                segments.push(uiSegmentSrv.newKey(tag.key));\n                segments.push(uiSegmentSrv.newOperator(tag.operator));\n                segments.push(uiSegmentSrv.newKeyValue(tag.value));\n            }\n        }\n\n        segments.push(uiSegmentSrv.newPlusButton());\n\n        return segments;\n    }\n\n    /**\n     * @param {string} category\n     * @param {string} variable\n     */\n    onSelectCategory(category, variable) {\n        this.target.category = category;\n        this.target.variable = variable;\n        this.execute();\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery ^= 1;\n    }\n\n    /**\n     * @param {ISegment} segment\n     * @param {number} index\n     * @returns {Promise}\n     */\n    getTagsOrValues(segment, index) {\n        const $q = this.$injector.get('$q');\n        const uiSegmentSrv = this.uiSegmentSrv;\n        const segments = this.options.segments;\n\n        let promise = $q.resolve([]);\n\n        if (this.target.variable) {\n            switch (segment.type) {\n                case 'key':\n                case 'plus-button':\n                    promise = this.datasource\n                        .getFacets(this.target.variable)\n                        .then((facets) => ['component', 'device'].concat(facets));\n                    break;\n\n                case 'value':\n\n                    promise = this.datasource.getSuggestions({\n                        type: segments[index - 2].value,\n                        variable: this.target.variable,\n                        tags: this.target.tags,\n                    });\n                    break;\n\n                case 'condition':\n                    return $q.resolve([\n                        this.uiSegmentSrv.newCondition('AND'),\n                        this.uiSegmentSrv.newCondition('OR')\n                    ]);\n                    break;\n\n                case 'operator':\n                    return $q.resolve(this.uiSegmentSrv.newOperators([\n                        '=', '!=', '<>', '<', '>', 'REGEXP', 'NOT REGEXP'\n                    ]));\n                    break;\n            }\n        }\n\n        return promise\n            .then((list) => list.map((item) => uiSegmentSrv.newSegment({value: `${item}`})))\n            .then(results => {\n                if (segment.type === 'key') {\n                    results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n                }\n                return results;\n            });\n    }\n\n    /**\n     * @param {ISegment} segment\n     * @param {number} index\n     */\n    tagSegmentUpdated(segment, index) {\n        const segmentSrv = this.uiSegmentSrv;\n        const segments = this.options.segments;\n        segments[index] = segment;\n\n        // handle remove tag condition\n\n        if (segment.value === this.options.removeSegment.value) {\n            segments.splice(index, 3);\n            if (segments.length === 0) {\n                segments.push(segmentSrv.newPlusButton());\n            } else if (segments.length > 2) {\n                segments.splice(Math.max(index - 1, 0), 1);\n                if (segments[segments.length - 1].type !== 'plus-button') {\n                    segments.push(segmentSrv.newPlusButton());\n                }\n            }\n        } else {\n            if (segment.type === 'plus-button') {\n                if (index > 2) {\n                    segments.splice(index, 0, segmentSrv.newCondition('AND'));\n                }\n\n                segments.push(segmentSrv.newOperator('='));\n                segments.push(segmentSrv.newFake(this.prompts.whereValue, 'value', 'query-segment-value'));\n                segment.type = 'key';\n                segment.cssClass = 'query-segment-key';\n            }\n\n            if ((index + 1) === segments.length) {\n                segments.push(segmentSrv.newPlusButton());\n            }\n        }\n\n        this.rebuildTargetTagConditions();\n    }\n\n    rebuildTargetTagConditions() {\n        const segments = this.options.segments;\n        const tags = [];\n        let tagIndex = 0;\n        let tagOperator = '';\n\n        segments.forEach((segment, index) => {\n            switch (segment.type) {\n                case 'key':\n                    if (tags.length === 0) {\n                        tags.push({});\n                    }\n                    tags[tagIndex].key = segment.value;\n                    break;\n                case 'value':\n                    if (tagOperator = tags[tagIndex].operator) {\n                        segments[index - 1] = this.uiSegmentSrv.newOperator(tagOperator);\n                        tags[tagIndex].operator = tagOperator;\n                    }\n                    tags[tagIndex].value = segment.value;\n                    break;\n                case 'condition':\n                    tags.push({condition: segment.value});\n                    tagIndex += 1;\n                    break;\n                case 'operator':\n                    tags[tagIndex].operator = segment.value;\n                    break;\n            }\n        });\n\n        this.target.tags = tags;\n        this.execute();\n    }\n\n    getOrderByOptions() {\n        const list = [\n            this.uiSegmentSrv.newSegment({\n                fake: true, \n                value: this.prompts.clearSelection, \n                html: this.prompts.orderBy\n            })\n        ];\n\n        if (this.options.isGraph) {\n            list.push(this.uiSegmentSrv.newSegment('metric'));\n        } else if (this.options.isTable) {\n            // list = this.target.selectData.map((el) => {\n                // return this.uiSegmentSrv.newSegment(el.value);\n            // });\n        }\n\n        return this.$injector.get('$q').resolve(list);\n    }\n\n    getLimitOptions() {\n        return this.$injector.get('$q').resolve([\n            {text: '1', 'value': 1},\n            {text: '5', 'value': 5},\n            {text: '10', 'value': 10},\n            {text: '50', 'value': 50},\n            {text: '100', 'value': 100}\n        ])\n    }\n}\n\nNetSpyGlassQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}