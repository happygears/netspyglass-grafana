{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","SQLBuilderFactory","_","NetSpyGlassDatasourceQueryCtrl","$scope","$injector","templateSrv","$q","uiSegmentSrv","$timeout","prompts","scope","injector","clearSelection","blankDropDownElement","target","SQLBuilder","queryConfig","factory","queryConfigWhere","rowMode","format","panel","type","customNsgqlQuery","category","variable","groupBy","val","orderBy","tags","tagSegments","tag","operator","test","value","condition","push","newCondition","newKey","key","newOperator","newKeyValue","newPlusButton","removeTagFilterSegment","newSegment","fake","groupByFormats","categories","selectList","selectData","length","addItemToSelect","console","log","data","func","alias","tagData","tagFacet","tagWord","tagOperation","refresh","index","splice","datasource","executeQuery","select","distinct","from","where","compile","then","formattedList","rows","buildNsgQLString","all","values","facetsList","variables","resultList","map","facet","name","selectedValues","el","filter","Boolean","currentValue","prompt","results","segments","segment","text","expandable","unshift","html","getVariables","query","transformToSegments","findDevices","device","findComponents","component","findTagFacets","findTagWordsQuery","rawQuery","needToBuildQuery","operation","sortOrder","sortByEl","element","selector","aggregator","elementDisplayStr","formatDisplay","onSelectChange","clearOrderBy","list","when","limit","clearLimit","clearGroupBy","groupByTimeOptions","nextValue","newOperators","nsgql","addTemplateVars","segmentKeyValue","queryObj","cloneDeep","transformToWhereSegments","angular","copy","Math","max","newFake","whereValue","cssClass","rebuildTargetTagConditions","tagIndex","tagOperator","each","segment2","configWhere","_buildTagsWhere","tagsList","result","forEach","i","obj","params","str","wherePart","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["/*\n * Copyright (c) 2016.  Happy Gears, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\nimport SQLBuilderFactory from './hg-sql-builder';\nimport _ from \"lodash\";\n\nexport class NetSpyGlassDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector, templateSrv, $q, uiSegmentSrv, $timeout) {\n        super($scope, $injector);\n\n        this.prompts = {\n            'category': 'select category',\n            'variable': 'select variable',\n            'device': 'select device',\n            'component': 'select component',\n            'groupByType': 'select type',\n            'groupBy': 'select value',\n            'orderBy': 'select value',\n            'selectItem': 'select item',\n            'whereValue': 'select value',\n        };\n\n        this.scope = $scope;\n        this.injector = $injector;\n\n        this.templateSrv = templateSrv;\n        this.$q = $q;\n        this.uiSegmentSrv = uiSegmentSrv;\n        this.$timeout = $timeout;\n\n        this.clearSelection = '-- clear selection --';\n        this.blankDropDownElement = '---';\n        \n        // this.target.category = this.target.category || this.prompts['category'];\n        // this.target.variable = this.target.variable || this.prompts['variable'];\n        // this.target.device = this.target.device || this.prompts['device'];\n        // this.target.component = this.target.component || this.prompts['component'];\n        // this.target.sortByEl = this.target.sortByEl || 'none';\n        // this.target.selector = this.target.selector || ' -- ';\n        // this.target.aggregator = this.target.aggregator || ' -- ';\n        // this.target.limit = this.target.limit || '100';\n        // this.target.group = this.target.group || 'select group';\n        // this.target.tagFacet = this.target.tagFacet || this.blankDropDownElement;\n        // this.target.tagOperation = this.target.tagOperation || '==';\n        // this.target.tagWord = this.target.tagWord || this.blankDropDownElement;\n        // this.target.tagData = this.target.tagData || [];\n        //\n        // this.target.format = this.panel.type === 'table' ? 'table' : 'time_series';\n        // this.target.formatDisplay = this.target.formatDisplay || 'Time Series';\n        //\n        // this.target.columns = this.target.columns || 'time,variable,device,component,metric';\n        // this.target.alias = this.target.alias || '';\n\n        this.target = this.target;\n        // _NEW_\n        this.SQLBuilder = new SQLBuilderFactory();\n        this.queryConfig = this.SQLBuilder.factory();\n\n        this.queryConfigWhere = ['AND'];\n        this.rowMode = false;\n\n        this.target.format = this.panel.type === 'table' ? 'table' : 'time_series';\n        this.target.customNsgqlQuery = '';\n\n        this.target.category = this.target.category || this.prompts['category'];\n        this.target.variable = this.target.variable || this.prompts['variable'];\n        this.target.groupBy = {\n            type: this.prompts['groupByType'],\n            val: this.prompts['groupBy']\n        };\n        this.target.orderBy = this.target.orderBy || this.prompts.orderBy;\n        this.target.tags = this.target.tags || [];\n\n        this.tagSegments = [];\n        for (let tag of this.target.tags) {\n            if (!tag.operator) {\n                if (/^\\/.*\\/$/.test(tag.value)) {\n                    tag.operator = \"=~\";\n                } else {\n                    tag.operator = '=';\n                }\n            }\n\n            if (tag.condition) {\n                this.tagSegments.push(uiSegmentSrv.newCondition(tag.condition));\n            }\n\n            this.tagSegments.push(uiSegmentSrv.newKey(tag.key));\n            this.tagSegments.push(uiSegmentSrv.newOperator(tag.operator));\n            this.tagSegments.push(uiSegmentSrv.newKeyValue(tag.value));\n        }\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n\n        this.removeTagFilterSegment = uiSegmentSrv.newSegment({fake: true, value: '-- remove tag filter --'});\n\n        this.groupByFormats = [this.prompts['groupByType'],'time', 'column'];\n        this.categories = [];\n        this.selectList = [];\n\n        if( this.panel.type === 'graph' ) {\n            this.target.selectData = ['time','metric'];\n        }\n        if( this.panel.type === 'table' ) {\n            this.target.selectData = this.target.selectData || [];\n            if( !this.target.selectData.length ) {\n                this.addItemToSelect();\n            }\n        }\n\n\n        console.log(this);\n        console.log(this.target);\n    }\n\n    addItemToSelect(data) {\n        if( typeof data === 'object' ) {\n            this.target.selectData.push(data)\n        } else {\n            this.target.selectData.push({\n                value: '',\n                func: [],\n                alias: []\n            });\n        }\n    }\n\n    /**\n     * @deprecated\n     */\n    isCategorySelected() {\n        return this.target.category !== this.prompts['category'] && this.target.category !== this.clearSelection;\n    }\n\n    /**\n     * @deprecated\n     */\n    isVariableSelected() {\n        return this.target.variable !== this.prompts['variable'] && this.target.variable !== this.clearSelection;\n    }\n\n    /**\n     * add new tag matching rule that consists of tag facet, operation ('==' or '<>') and tag word.\n     * Unfortunately if input fields for the tag facet and word are blank, the height of the corresponding\n     * visible element is reduced (element <a> is visible and its height is 0 when it has no contents, so\n     * all we see is the margin around it). To work around that I put \"-\" in these fields. It is unobtrusive\n     * enough and looks like some sort of a prompt, but it is a hack nonetheless.\n     * FIXME: find a way to fix height of the visible element without adding any contents.\n     */\n    /**\n     * @deprecated\n     */\n    tagDataAdd() {\n        this.target.tagData[this.target.tagData.length] = {\n            tagFacet : this.blankDropDownElement,\n            tagWord : this.blankDropDownElement,\n            tagOperation : '=='\n        };\n        this.refresh();\n    }\n    /**\n     * @deprecated\n     */\n    tagDataRemove(index) {\n        this.target.tagData.splice(index,1);\n        this.refresh();\n    }\n\n    getCategories() {\n        this.datasource.executeQuery(this.SQLBuilder.factory({\n            select: ['category,name'],\n            distinct: true,\n            from: 'variables',\n            where: ['AND', {\n                category: ['<>', '']\n            }],\n            orderBy: ['category']\n        }).compile(), 'json')\n            .then( (data) => {\n                let formattedList = _.groupBy(data[0].rows, 'category');\n\n                console.log(formattedList);\n\n                this.categories = formattedList;\n            });\n    }\n    selectCat(category, variable) {\n        this.target.category = category;\n        this.target.variable = variable;\n        this.target.variable = variable;\n        this.queryConfig.from(variable);\n\n        if( this.panel.type === 'graph' ) {\n            this.queryConfig.select(this.target.selectData);\n        }\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    getSelectValue() {\n        this.$q.all([\n            this.datasource.executeQuery(this.SQLBuilder.factory({\n                select: ['tagFacet'],\n                distinct: true,\n                from: this.target.variable,\n                orderBy: ['tagFacet']\n            }).compile(), 'list'),\n            this.datasource.executeQuery(this.SQLBuilder.factory({\n                select: ['category,name'],\n                distinct: true,\n                from: 'variables',\n                where: ['AND', {\n                    category: ['<>', '']\n                }],\n                orderBy: ['category']\n            }).compile(), 'json')\n        ]).then( (values) => {\n            let facetsList = values[0],\n                variables = _.groupBy(values[1][0].rows, 'category'),\n                resultList = [];\n\n            resultList.push({\n                tags: facetsList.map( (facet) => {\n                    return {name: facet}\n                })\n            });\n\n            resultList.push({\n                type: 'separator'\n            });\n\n            resultList.push({\n                type: 'simple',\n                name: 'time'\n            });\n            resultList.push({\n                type: 'simple',\n                name: 'metric'\n            });\n\n            resultList.push({\n                type: 'separator'\n            });\n\n            resultList.push(variables);\n\n            this.selectList = resultList;\n        });\n    }\n    onSelectUpdated(value) {\n        this.$timeout( () => {\n            let selectedValues = this.target.selectData.map( (el) => {\n                if( el.value ) {\n                    return el.value;\n                }\n            }).filter(Boolean);\n\n            this.queryConfig.select(selectedValues);\n\n            this.buildNsgQLString();\n            this.refresh();\n        }, 0);\n    }\n\n    transformToSegments(currentValue, prompt) {\n        console.log('transformToSegments called:  currentValue=' + currentValue + ' prompt=' + prompt);\n        return (results) => {\n            var segments = _.map(results, segment => {\n                //TODO: really we need to ckeck segment.text if all request types will be 'list'\n                if( segment.text ) {\n                    return this.uiSegmentSrv.newSegment({ value: segment.text, expandable: segment.expandable });\n                } else {\n                    return this.uiSegmentSrv.newSegment({ value: segment });\n                }\n            });\n            // segments.unshift(this.uiSegmentSrv.newSegment({ fake: true, value: this.clearSelection, html: prompt}));\n\n            // there is no need to add \"clear selection\" item if current value is already equal to prompt\n            if (currentValue !== prompt) {\n                segments.unshift(this.uiSegmentSrv.newSegment({ fake: true, value: this.clearSelection, html: prompt}));\n            }\n\n            console.log(segments);\n\n            return segments;\n        };\n    }\n\n    /**\n     * @deprecated\n     */\n    testRemove() {\n        this.target.variable = this.prompts['variable'];\n        this.getVariables();\n        this.refresh();\n    }\n\n    getVariables() {\n        let query = this.SQLBuilder.factory({\n            select: ['name'],\n            distinct: true,\n            from: 'variables',\n            where: ['AND', {\n                category: ['=', this.target.category]\n            }],\n            orderBy: ['name']\n        }).compile();\n\n        return this.datasource.executeQuery(query, 'list')\n            .then(this.transformToSegments(this.target.variable, this.prompts['variable']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getDevices() {\n        return this.datasource.findDevices(this.target)\n            .then(this.transformToSegments(this.target.device, this.prompts['device']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getComponents() {\n        return this.datasource.findComponents(this.target)\n            .then(this.transformToSegments(this.target.component, this.prompts['component']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getTagsFacet(index) {\n        return this.datasource.findTagFacets(this.target, index)\n            .then(this.transformToSegments(this.target.tagFacet, this.target.tagFacet));  // do not add \"-- clear selection --\" item\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getTagsWord(index) {\n        return this.datasource.findTagWordsQuery(this.target, index)\n            .then(this.transformToSegments(this.target.tagWord, this.target.tagWord));  // do not add \"-- clear selection --\" item\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalCategory() {\n        if (this.target.category == this.clearSelection) {\n            this.target.category = this.prompts['category'];\n        }\n        // user has changed category, we should erase variable and other selections because they are\n        // not valid anymore\n        this.target.variable = this.prompts['variable'];\n        this.target.device = this.prompts['device'];\n        this.target.component = this.prompts['component'];\n        this.target.tagData = [];\n        // TODO: clear variable name when category changes. Only variable name field in the same target should change,\n        // variable name fields in other targets should not change\n        // FIXME: this does not look right, there must be a way to update element in the browser without manipulating it directly in DOM\n        // angular.element('#variable-field').children().children('a').html(this.target.variable);\n        // call refresh to force graph reload (which should turn blank since we dont have enough data\n        // to build valid query)\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalVariable() {\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalDevice() {\n        if(this.target.device == this.clearSelection) {\n            this.target.device = this.prompts['device'];\n        }\n        this.refresh();\n    }\n    /**\n     * @deprecated\n     */\n    onChangeInternalComponent() {\n        if(this.target.component == this.clearSelection) {\n            this.target.component = this.prompts['component'];\n        }\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    onChangeInternalTagFacet(index) {\n        // clear tag word when user changes tag facet. The dialog enters state where tag facet is selected\n        // but tag word is not. This state is invalid and should be transient, it does not make sense\n        // to call this.refresh() because query is yet incomplete\n        this.target.tagData[index].tagWord = this.blankDropDownElement;\n        // TODO: clear field \"tag word\" when \"tag facet\" changes. Only associated tag word should change,\n        // tag word fields in another tag matches in the same target or other targets should not change.\n        // FIXME: this does not look right, there must be a way to update element in the browser without manipulating it directly in DOM\n        // angular.element('#tag-word-'+index).children().children(\"a.tag-word\").html(this.target.tagData[index].tagWord);\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    //noinspection JSUnusedLocalSymbols\n    onChangeInternalTagWord(index) {\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    /**\n     * @deprecated\n     */\n    tagOperation(index, operation) {\n        this.target.tagData[index].tagOperation = operation;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setSortByEl(sortOrder) {\n        this.target.sortByEl = sortOrder;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setSelector(element) {\n        this.target.selector = element;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setAggregator(element) {\n        this.target.aggregator = element;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setAlias() {\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setFormat(element, elementDisplayStr) {\n        this.target.format = element;\n        this.target.formatDisplay = elementDisplayStr;\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    setColumns() {\n        // console.log(this.target.columns);\n        this.target.needToBuildQuery = true;\n        this.refresh();\n    }\n\n    // setGroup() {\n    //     if (this.target.group == '') {\n    //         if(this.tempNew !== ''){\n    //             this.target.group = this.tempNew;\n    //         }\n    //         else {\n    //             this.target.group = 'select group';\n    //         }\n    //     }\n    //     this.refresh();\n    // }\n\n\n\n    //////////////////////////////////////////////////\n    //////////////////////////////////////////////////\n    //////////////////_NEW_/////////////////////\n\n\n    onChangeNsgQl() {\n        this.buildNsgQLString({type: 'string'});\n        this.refresh();\n    }\n\n    toggleEditorMode() {\n        this.rowMode = !this.rowMode;\n    }\n\n    getCollapsedText() {\n        return this.target.customNsgqlQuery;\n    }\n\n    onFromChange() {\n        if( this.target.category !== this.target.category  && this.target.variable != this.prompts['variable']) {\n            console.log(111);\n            this.target.category = this.target.category;\n            this.target.variable = this.prompts['variable'];\n            this.onSelectChange();\n            return;\n        }\n\n        this.target.category = this.target.category;\n    }\n    onSelectChange() {\n        this.target.variable = this.target.variable;\n        this.queryConfig.select(['time','metric']);\n        this.queryConfig.from(this.target.variable);\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    onOrderByChange() {\n        this.queryConfig.clearOrderBy();\n\n        if( this.target.orderBy != this.clearSelection ) {\n            this.queryConfig.orderBy(this.target.orderBy);\n        }\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n    onOrderByClear() {\n        this.target.orderBy = null;\n        this.queryConfig.clearOrderBy();\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n    getOrderByValues() {\n        let list = [];\n\n        if( this.panel.type === 'graph' ) {\n            list = [\n                this.uiSegmentSrv.newSegment('metric')\n            ];\n        }\n        if( this.panel.type === 'table' ) {\n            list = this.target.selectData.map( (el) => {\n                return this.uiSegmentSrv.newSegment(el.value);\n            });\n        }\n\n        list.unshift(this.uiSegmentSrv.newSegment({fake: true, value: this.clearSelection, html: this.prompts.orderBy}));\n\n        return this.$q.when(list);\n    }\n\n    onLimitChange() {\n        if( this.limit ) {\n            this.queryConfig.limit(this.limit);\n        } else {\n            this.queryConfig.clearLimit();\n        }\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    onGroupByTypeChange() {\n        //TODO: fix this behavior\n        this.target.groupBy.val = this.prompts['groupBy'];\n\n        if( this.target.groupBy.type === 'select type' ) {\n            this.queryConfig.clearGroupBy();\n            this.buildNsgQLString();\n            this.refresh();\n        }\n    }\n\n    onGroupByChange() {\n        if( this.target.groupBy.type === 'time' ) {\n            this.queryConfig.groupBy(`time(${this.target.groupBy.val})`);\n        }\n        if( this.target.groupBy.type === 'column' ) {\n            this.queryConfig.groupBy(this.target.groupBy.val);\n        }\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    getGroupByVariables() {\n        if( this.target.groupBy.type === 'time' ) {\n            let groupByTimeOptions = [\n                this.uiSegmentSrv.newSegment('1s'),\n                this.uiSegmentSrv.newSegment('1m'),\n                this.uiSegmentSrv.newSegment('30m'),\n                this.uiSegmentSrv.newSegment('1h'),\n                this.uiSegmentSrv.newSegment('1d')\n            ];\n            return this.$q.when(groupByTimeOptions);\n        }\n\n        if( this.target.groupBy.type === 'column' ) {\n            let query = this.SQLBuilder.factory({\n                select: ['tagFacet'],\n                distinct: true,\n                from: this.target.variable,\n                orderBy: ['tagFacet']\n            }).compile();\n\n            return this.datasource.executeQuery(query, 'list')\n                .then(this.transformToSegments(this.target.groupBy.val, '-- select group --'));\n        }\n    }\n\n\n    getTagsOrValues(segment, index) {\n        console.log(segment, index);\n        let format = 'list';\n\n        if (segment.type === 'condition') {\n            return this.$q.when([this.uiSegmentSrv.newSegment('AND'), this.uiSegmentSrv.newSegment('OR')]);\n        }\n        if (segment.type === 'operator') {\n            var nextValue = this.tagSegments[index+1].value;\n            return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<>', '<', '>','REGEXP','NOT REGEXP']));\n        }\n\n        let nsgql, addTemplateVars;\n        if (segment.type === 'key' || segment.type === 'plus-button') {\n            nsgql = this.SQLBuilder.factory({\n                select: ['tagFacet'],\n                distinct: true,\n                from: this.target.variable,\n                orderBy: ['tagFacet']\n            }).compile();\n\n            addTemplateVars = false;\n        } else if (segment.type === 'value')  {\n            let segmentKeyValue = this.tagSegments[index - 2].value,\n                queryObj;\n\n            console.log(this.queryConfigWhere);\n\n            if (segmentKeyValue === 'device') {\n                queryObj = {\n                    select: ['device'],\n                    distinct: true,\n                    from: this.target.variable,\n                    orderBy: ['device'],\n                    where: this.queryConfigWhere.length > 1 ? _.cloneDeep(this.queryConfigWhere) : null\n                };\n            }\n            if (segmentKeyValue === 'component') {\n                queryObj = {\n                    select: ['component'],\n                    distinct: true,\n                    from: this.target.variable,\n                    orderBy: ['component'],\n                    where: this.queryConfigWhere.length > 1 ? _.cloneDeep(this.queryConfigWhere) : null\n                };\n            }\n            if (segmentKeyValue !== 'device' && segmentKeyValue !== 'component') {\n                queryObj = {\n                    select: [this.tagSegments[index-2].value],\n                    distinct: true,\n                    from: 'devices',\n                    where: {},\n                    orderBy: [this.tagSegments[index-2].value]\n                };\n                queryObj.where[this.tagSegments[index-2].value] = ['NOTNULL'];\n            }\n\n            nsgql = this.SQLBuilder.factory(queryObj).compile();\n        }\n\n        return this.datasource.executeQuery(nsgql, format)\n            .then((results) => {\n                if (segment.type === 'key' || segment.type === 'plus-button') {\n                    results.unshift('component');\n                    results.unshift('device');\n                }\n                return results\n            })\n            .then(this.transformToWhereSegments(addTemplateVars))\n            .then(results => {\n                if (segment.type === 'key') {\n                    results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n                }\n                return results;\n            });\n    }\n\n    transformToWhereSegments() {\n        return (results) => {\n            var segments = _.map(results, segment => {\n                return this.uiSegmentSrv.newSegment({ value: `${segment}` });\n            });\n\n            return segments;\n        };\n    }\n\n    tagSegmentUpdated(segment, index) {\n        this.tagSegments[index] = segment;\n\n        // handle remove tag condition\n        if (segment.value === this.removeTagFilterSegment.value) {\n            this.tagSegments.splice(index, 3);\n            if (this.tagSegments.length === 0) {\n                this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n            } else if (this.tagSegments.length > 2) {\n                this.tagSegments.splice(Math.max(index-1, 0), 1);\n                if (this.tagSegments[this.tagSegments.length-1].type !== 'plus-button') {\n                    this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n                }\n            }\n        } else {\n            if (segment.type === 'plus-button') {\n                if (index > 2) {\n                    this.tagSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n                }\n                this.tagSegments.push(this.uiSegmentSrv.newOperator('='));\n                this.tagSegments.push(this.uiSegmentSrv.newFake(this.prompts.whereValue, 'value', 'query-segment-value'));\n                segment.type = 'key';\n                segment.cssClass = 'query-segment-key';\n            }\n\n            if ((index+1) === this.tagSegments.length) {\n                this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n            }\n        }\n\n        this.rebuildTargetTagConditions();\n    }\n\n    rebuildTargetTagConditions() {\n        var tags = [];\n        var tagIndex = 0;\n        var tagOperator = \"\";\n\n        console.log(this.tagSegments);\n\n        _.each(this.tagSegments, (segment2, index) => {\n            if (segment2.type === 'key') {\n                if (tags.length === 0) {\n                    tags.push({});\n                }\n                tags[tagIndex].key = segment2.value;\n            } else if (segment2.type === 'value') {\n                tagOperator = tags[tagIndex].operator;\n                if (tagOperator) {\n                    this.tagSegments[index-1] = this.uiSegmentSrv.newOperator(tagOperator);\n                    tags[tagIndex].operator = tagOperator;\n                }\n                tags[tagIndex].value = segment2.value;\n            } else if (segment2.type === 'condition') {\n                tags.push({ condition: segment2.value });\n                tagIndex += 1;\n            } else if (segment2.type === 'operator') {\n                tags[tagIndex].operator = segment2.value;\n            }\n        });\n\n        this.target.tags = tags;\n\n        let configWhere = this._buildTagsWhere('tags', this.target.tags);\n        this.queryConfigWhere = ['AND'];\n        if( configWhere ) {\n            this.queryConfigWhere.push(configWhere);\n        }\n\n\n        this.buildNsgQLString();\n        this.refresh();\n    }\n\n    _buildTagsWhere(name, tagsList) {\n        let result = [];\n\n        if(tagsList.length) {\n            tagsList.forEach( (tag, i) => {\n                if( tag.value == this.prompts.whereValue) return;\n\n                let obj = {};\n                obj[tag.key] = [tag.operator, tag.value];\n\n                if(tag.condition) {\n                    result.push(tag.condition);\n                }\n                result.push(obj);\n            })\n        }\n\n        if( result.length ) {\n            result.unshift('AND');\n        } else {\n            result = null;\n        }\n\n        return result;\n    }\n\n    buildNsgQLString(params = {}) {\n        let str;\n\n        if( params.type == 'string' ) {\n            str = this.target.customNsgqlQuery;\n        }\n\n        if( params.type != 'string' ) {\n            let wherePart;\n            wherePart = _.cloneDeep(this.queryConfigWhere);\n            wherePart.push('$_timeFilter'); //GROUP BY time($__interval)\n            this.queryConfig.where( wherePart );\n\n            str = this.queryConfig.compile();\n        }\n\n        console.log('%cNsgQLString', 'color: blueviolet; font-weight: bold;', str);\n        this.target.customNsgqlQuery = str;\n    };\n}\n\nNetSpyGlassDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}