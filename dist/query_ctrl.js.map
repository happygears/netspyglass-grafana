{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","NetSpyGlassDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","prompts","scope","injector","clearSelection","blankDropDownElement","target","category","variable","device","component","sortByEl","selector","aggregator","limit","group","tagFacet","tagOperation","tagWord","tagData","format","formatDisplay","columns","alias","length","refresh","index","splice","datasource","findCategoriesQuery","then","transformToSegments","currentValue","prompt","console","log","results","segments","_","map","newSegment","value","segment","text","expandable","unshift","fake","html","getVariables","findVariablesQuery","findDevices","findComponents","findTagFacets","findTagWordsQuery","rawQuery","operation","sortOrder","element","elementDisplayStr","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBQA,qB,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;sDAGKC,8B;;;AAET,wDAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,YAA/B,EAA6C;AAAA;;AAAA,gLACnCF,MADmC,EAC3BC,SAD2B;;AAGzC,0BAAKE,OAAL,GAAe;AACX,oCAAY,iBADD;AAEX,oCAAY,iBAFD;AAGX,kCAAU,eAHC;AAIX,qCAAa;AAJF,qBAAf;;AAOA,0BAAKC,KAAL,GAAaJ,MAAb;AACA,0BAAKK,QAAL,GAAgBJ,SAAhB;AACA,0BAAKC,YAAL,GAAoBA,YAApB;AACA,0BAAKI,cAAL,GAAsB,uBAAtB;AACA,0BAAKC,oBAAL,GAA4B,KAA5B;AACA,0BAAKC,MAAL,CAAYC,QAAZ,GAAuB,MAAKD,MAAL,CAAYC,QAAZ,IAAwB,MAAKN,OAAL,CAAa,UAAb,CAA/C;AACA,0BAAKK,MAAL,CAAYE,QAAZ,GAAuB,MAAKF,MAAL,CAAYE,QAAZ,IAAwB,MAAKP,OAAL,CAAa,UAAb,CAA/C;AACA,0BAAKK,MAAL,CAAYG,MAAZ,GAAqB,MAAKH,MAAL,CAAYG,MAAZ,IAAsB,MAAKR,OAAL,CAAa,QAAb,CAA3C;AACA,0BAAKK,MAAL,CAAYI,SAAZ,GAAwB,MAAKJ,MAAL,CAAYI,SAAZ,IAAyB,MAAKT,OAAL,CAAa,WAAb,CAAjD;AACA,0BAAKK,MAAL,CAAYK,QAAZ,GAAuB,MAAKL,MAAL,CAAYK,QAAZ,IAAwB,MAA/C;AACA,0BAAKL,MAAL,CAAYM,QAAZ,GAAuB,MAAKN,MAAL,CAAYM,QAAZ,IAAwB,MAA/C;AACA,0BAAKN,MAAL,CAAYO,UAAZ,GAAyB,MAAKP,MAAL,CAAYO,UAAZ,IAA0B,MAAnD;AACA,0BAAKP,MAAL,CAAYQ,KAAZ,GAAoB,MAAKR,MAAL,CAAYQ,KAAZ,IAAqB,KAAzC;AACA,0BAAKR,MAAL,CAAYS,KAAZ,GAAoB,MAAKT,MAAL,CAAYS,KAAZ,IAAqB,cAAzC;AACA,0BAAKT,MAAL,CAAYU,QAAZ,GAAuB,MAAKV,MAAL,CAAYU,QAAZ,IAAwB,MAAKX,oBAApD;AACA,0BAAKC,MAAL,CAAYW,YAAZ,GAA2B,MAAKX,MAAL,CAAYW,YAAZ,IAA4B,IAAvD;AACA,0BAAKX,MAAL,CAAYY,OAAZ,GAAsB,MAAKZ,MAAL,CAAYY,OAAZ,IAAuB,MAAKb,oBAAlD;AACA,0BAAKC,MAAL,CAAYa,OAAZ,GAAsB,MAAKb,MAAL,CAAYa,OAAZ,IAAuB,EAA7C;;AAEA,0BAAKb,MAAL,CAAYc,MAAZ,GAAqB,MAAKd,MAAL,CAAYc,MAAZ,IAAsB,aAA3C;AACA,0BAAKd,MAAL,CAAYe,aAAZ,GAA4B,MAAKf,MAAL,CAAYe,aAAZ,IAA6B,aAAzD;;AAEA,0BAAKf,MAAL,CAAYgB,OAAZ,GAAsB,MAAKhB,MAAL,CAAYgB,OAAZ,IAAuB,uCAA7C;AACA,0BAAKhB,MAAL,CAAYiB,KAAZ,GAAoB,MAAKjB,MAAL,CAAYiB,KAAZ,IAAqB,EAAzC;AAjCyC;AAkC5C;;;;yDAEoB;AACjB,+BAAO,KAAKjB,MAAL,CAAYC,QAAZ,KAAyB,KAAKN,OAAL,CAAa,UAAb,CAAzB,IAAqD,KAAKK,MAAL,CAAYC,QAAZ,KAAyB,KAAKH,cAA1F;AACH;;;yDAEoB;AACjB,+BAAO,KAAKE,MAAL,CAAYE,QAAZ,KAAyB,KAAKP,OAAL,CAAa,UAAb,CAAzB,IAAqD,KAAKK,MAAL,CAAYE,QAAZ,KAAyB,KAAKJ,cAA1F;AACH;;;iDAUY;AACT,6BAAKE,MAAL,CAAYa,OAAZ,CAAoB,KAAKb,MAAL,CAAYa,OAAZ,CAAoBK,MAAxC,IAAkD;AAC9CR,sCAAW,KAAKX,oBAD8B;AAE9Ca,qCAAU,KAAKb,oBAF+B;AAG9CY,0CAAe;AAH+B,yBAAlD;AAKA,6BAAKQ,OAAL;AACH;;;kDAEaC,K,EAAO;AACjB,6BAAKpB,MAAL,CAAYa,OAAZ,CAAoBQ,MAApB,CAA2BD,KAA3B,EAAiC,CAAjC;AACA,6BAAKD,OAAL;AACH;;;oDAEe;AACZ,+BAAO,KAAKG,UAAL,CAAgBC,mBAAhB,CAAoC,KAAKvB,MAAzC,EACFwB,IADE,CACG,KAAKC,mBAAL,CAAyB,KAAKzB,MAAL,CAAYC,QAArC,EAA+C,KAAKN,OAAL,CAAa,UAAb,CAA/C,CADH,CAAP;AAEA;AACH;;;wDAEmB+B,Y,EAAcC,M,EAAQ;AAAA;;AACtCC,gCAAQC,GAAR,CAAY,+CAA+CH,YAA/C,GAA8D,UAA9D,GAA2EC,MAAvF;AACA,+BAAO,UAACG,OAAD,EAAa;AAChB,gCAAIC,WAAWC,EAAEC,GAAF,CAAMH,OAAN,EAAe,mBAAW;AACrC,uCAAO,OAAKpC,YAAL,CAAkBwC,UAAlB,CAA6B,EAAEC,OAAOC,QAAQC,IAAjB,EAAuBC,YAAYF,QAAQE,UAA3C,EAA7B,CAAP;AACH,6BAFc,CAAf;AAGA;;AAEA;AACA,gCAAIZ,iBAAiBC,MAArB,EAA6B;AACzBI,yCAASQ,OAAT,CAAiB,OAAK7C,YAAL,CAAkBwC,UAAlB,CAA6B,EAAEM,MAAM,IAAR,EAAcL,OAAO,OAAKrC,cAA1B,EAA0C2C,MAAMd,MAAhD,EAA7B,CAAjB;AACH;AACD,mCAAOI,QAAP;AACH,yBAXD;AAYH;;;iDAEY;AACT,6BAAK/B,MAAL,CAAYE,QAAZ,GAAuB,KAAKP,OAAL,CAAa,UAAb,CAAvB;AACA,6BAAK+C,YAAL;AACA,6BAAKvB,OAAL;AACH;;;mDAEc;AACX,+BAAO,KAAKG,UAAL,CAAgBqB,kBAAhB,CAAmC,KAAK3C,MAAxC,EACFwB,IADE,CACG,KAAKC,mBAAL,CAAyB,KAAKzB,MAAL,CAAYE,QAArC,EAA+C,KAAKP,OAAL,CAAa,UAAb,CAA/C,CADH,CAAP;AAEA;AACH;;;iDAEY;AACT,+BAAO,KAAK2B,UAAL,CAAgBsB,WAAhB,CAA4B,KAAK5C,MAAjC,EACFwB,IADE,CACG,KAAKC,mBAAL,CAAyB,KAAKzB,MAAL,CAAYG,MAArC,EAA6C,KAAKR,OAAL,CAAa,QAAb,CAA7C,CADH,CAAP;AAEA;AACH;;;oDAEe;AACZ,+BAAO,KAAK2B,UAAL,CAAgBuB,cAAhB,CAA+B,KAAK7C,MAApC,EACFwB,IADE,CACG,KAAKC,mBAAL,CAAyB,KAAKzB,MAAL,CAAYI,SAArC,EAAgD,KAAKT,OAAL,CAAa,WAAb,CAAhD,CADH,CAAP;AAEA;AACH;;;iDAEYyB,K,EAAO;AAChB,+BAAO,KAAKE,UAAL,CAAgBwB,aAAhB,CAA8B,KAAK9C,MAAnC,EAA2CoB,KAA3C,EACFI,IADE,CACG,KAAKC,mBAAL,CAAyB,KAAKzB,MAAL,CAAYU,QAArC,EAA+C,KAAKV,MAAL,CAAYU,QAA3D,CADH,CAAP,CADgB,CAEkE;AAClF;AACH;;;gDAEWU,K,EAAO;AACf,+BAAO,KAAKE,UAAL,CAAgByB,iBAAhB,CAAkC,KAAK/C,MAAvC,EAA+CoB,KAA/C,EACFI,IADE,CACG,KAAKC,mBAAL,CAAyB,KAAKzB,MAAL,CAAYY,OAArC,EAA8C,KAAKZ,MAAL,CAAYY,OAA1D,CADH,CAAP,CADe,CAEiE;AACnF;;;uDAEkB;AACf,6BAAKZ,MAAL,CAAYgD,QAAZ,GAAuB,CAAC,KAAKhD,MAAL,CAAYgD,QAApC;AACH;;;+DAE0B;AACvB,4BAAI,KAAKhD,MAAL,CAAYC,QAAZ,IAAwB,KAAKH,cAAjC,EAAiD;AAC7C,iCAAKE,MAAL,CAAYC,QAAZ,GAAuB,KAAKN,OAAL,CAAa,UAAb,CAAvB;AACH;AACD;AACA;AACA,6BAAKK,MAAL,CAAYE,QAAZ,GAAuB,KAAKP,OAAL,CAAa,UAAb,CAAvB;AACA,6BAAKK,MAAL,CAAYG,MAAZ,GAAqB,KAAKR,OAAL,CAAa,QAAb,CAArB;AACA,6BAAKK,MAAL,CAAYI,SAAZ,GAAwB,KAAKT,OAAL,CAAa,WAAb,CAAxB;AACA,6BAAKK,MAAL,CAAYa,OAAZ,GAAsB,EAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAAKM,OAAL;AACH;;;+DAE0B;AACvBS,gCAAQC,GAAR,CAAY,6BAA6B,KAAK7B,MAAL,CAAYE,QAArD;AACA,6BAAKiB,OAAL;AACH;;;6DAEwB;AACrB,4BAAG,KAAKnB,MAAL,CAAYG,MAAZ,IAAsB,KAAKL,cAA9B,EAA8C;AAC1C,iCAAKE,MAAL,CAAYG,MAAZ,GAAqB,KAAKR,OAAL,CAAa,QAAb,CAArB;AACH;AACD,6BAAKwB,OAAL;AACH;;;gEAC2B;AACxB,4BAAG,KAAKnB,MAAL,CAAYI,SAAZ,IAAyB,KAAKN,cAAjC,EAAiD;AAC7C,iCAAKE,MAAL,CAAYI,SAAZ,GAAwB,KAAKT,OAAL,CAAa,WAAb,CAAxB;AACH;AACD,6BAAKwB,OAAL;AACH;;;6DAEwBC,K,EAAO;AAC5B;AACA;AACA;AACA,6BAAKpB,MAAL,CAAYa,OAAZ,CAAoBO,KAApB,EAA2BR,OAA3B,GAAqC,KAAKb,oBAA1C;AACA;AACA;AACA;AACA;AACA,6BAAKoB,OAAL;AACH;;;4DAGuBC,K,EAAO;AAC3B,6BAAKD,OAAL;AACH;;;iDAEYC,K,EAAO6B,S,EAAW;AAC3B,6BAAKjD,MAAL,CAAYa,OAAZ,CAAoBO,KAApB,EAA2BT,YAA3B,GAA0CsC,SAA1C;AACA,6BAAK9B,OAAL;AACH;;;gDAEW+B,S,EAAW;AACnB,6BAAKlD,MAAL,CAAYK,QAAZ,GAAuB6C,SAAvB;AACA,6BAAK/B,OAAL;AACH;;;gDAEWgC,O,EAAS;AACjB,6BAAKnD,MAAL,CAAYM,QAAZ,GAAuB6C,OAAvB;AACA,6BAAKhC,OAAL;AACH;;;kDAEagC,O,EAAS;AACnB,6BAAKnD,MAAL,CAAYO,UAAZ,GAAyB4C,OAAzB;AACA,6BAAKhC,OAAL;AACH;;;+CAEU;AACP,6BAAKA,OAAL;AACH;;;8CAESgC,O,EAASC,iB,EAAmB;AAClC,6BAAKpD,MAAL,CAAYc,MAAZ,GAAqBqC,OAArB;AACA,6BAAKnD,MAAL,CAAYe,aAAZ,GAA4BqC,iBAA5B;AACA,6BAAKjC,OAAL;AACH;;;iDAEY;AACT;AACA,6BAAKA,OAAL;AACH;;;;cAxN+C7B,S;;;;AAwOpDC,2CAA+B8D,WAA/B,GAA6C,4BAA7C","file":"query_ctrl.js","sourcesContent":["/*\n * Copyright (c) 2016.  Happy Gears, Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class NetSpyGlassDatasourceQueryCtrl extends QueryCtrl {\n\n    constructor($scope, $injector, uiSegmentSrv) {\n        super($scope, $injector);\n\n        this.prompts = {\n            'category': 'select category',\n            'variable': 'select variable',\n            'device': 'select device',\n            'component': 'select component'\n        };\n\n        this.scope = $scope;\n        this.injector = $injector;\n        this.uiSegmentSrv = uiSegmentSrv;\n        this.clearSelection = '-- clear selection --';\n        this.blankDropDownElement = '---';\n        this.target.category = this.target.category || this.prompts['category'];\n        this.target.variable = this.target.variable || this.prompts['variable'];\n        this.target.device = this.target.device || this.prompts['device'];\n        this.target.component = this.target.component || this.prompts['component'];\n        this.target.sortByEl = this.target.sortByEl || 'none';\n        this.target.selector = this.target.selector || ' -- ';\n        this.target.aggregator = this.target.aggregator || ' -- ';\n        this.target.limit = this.target.limit || '100';\n        this.target.group = this.target.group || 'select group';\n        this.target.tagFacet = this.target.tagFacet || this.blankDropDownElement;\n        this.target.tagOperation = this.target.tagOperation || '==';\n        this.target.tagWord = this.target.tagWord || this.blankDropDownElement;\n        this.target.tagData = this.target.tagData || [];\n\n        this.target.format = this.target.format || 'time_series';\n        this.target.formatDisplay = this.target.formatDisplay || 'Time Series';\n\n        this.target.columns = this.target.columns || 'time,variable,device,component,metric';\n        this.target.alias = this.target.alias || '';\n    }\n\n    isCategorySelected() {\n        return this.target.category !== this.prompts['category'] && this.target.category !== this.clearSelection;\n    }\n\n    isVariableSelected() {\n        return this.target.variable !== this.prompts['variable'] && this.target.variable !== this.clearSelection;\n    }\n\n    /**\n     * add new tag matching rule that consists of tag facet, operation ('==' or '<>') and tag word.\n     * Unfortunately if input fields for the tag facet and word are blank, the height of the corresponding\n     * visible element is reduced (element <a> is visible and its height is 0 when it has no contents, so\n     * all we see is the margin around it). To work around that I put \"-\" in these fields. It is unobtrusive\n     * enough and looks like some sort of a prompt, but it is a hack nonetheless.\n     * FIXME: find a way to fix height of the visible element without adding any contents.\n     */\n    tagDataAdd() {\n        this.target.tagData[this.target.tagData.length] = {\n            tagFacet : this.blankDropDownElement,\n            tagWord : this.blankDropDownElement,\n            tagOperation : '=='\n        };\n        this.refresh();\n    }\n\n    tagDataRemove(index) {\n        this.target.tagData.splice(index,1);\n        this.refresh();\n    }\n\n    getCategories() {\n        return this.datasource.findCategoriesQuery(this.target)\n            .then(this.transformToSegments(this.target.category, this.prompts['category']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    transformToSegments(currentValue, prompt) {\n        console.log('transformToSegments called:  currentValue=' + currentValue + ' prompt=' + prompt);\n        return (results) => {\n            var segments = _.map(results, segment => {\n                return this.uiSegmentSrv.newSegment({ value: segment.text, expandable: segment.expandable });\n            });\n            // segments.unshift(this.uiSegmentSrv.newSegment({ fake: true, value: this.clearSelection, html: prompt}));\n\n            // there is no need to add \"clear selection\" item if current value is already equal to prompt\n            if (currentValue !== prompt) {\n                segments.unshift(this.uiSegmentSrv.newSegment({ fake: true, value: this.clearSelection, html: prompt}));\n            }\n            return segments;\n        };\n    }\n\n    testRemove() {\n        this.target.variable = this.prompts['variable'];\n        this.getVariables();\n        this.refresh();\n    }\n\n    getVariables() {\n        return this.datasource.findVariablesQuery(this.target)\n            .then(this.transformToSegments(this.target.variable, this.prompts['variable']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getDevices() {\n        return this.datasource.findDevices(this.target)\n            .then(this.transformToSegments(this.target.device, this.prompts['device']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getComponents() {\n        return this.datasource.findComponents(this.target)\n            .then(this.transformToSegments(this.target.component, this.prompts['component']));\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getTagsFacet(index) {\n        return this.datasource.findTagFacets(this.target, index)\n            .then(this.transformToSegments(this.target.tagFacet, this.target.tagFacet));  // do not add \"-- clear selection --\" item\n        // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n    }\n\n    getTagsWord(index) {\n        return this.datasource.findTagWordsQuery(this.target, index)\n            .then(this.transformToSegments(this.target.tagWord, this.target.tagWord));  // do not add \"-- clear selection --\" item\n    }\n\n    toggleEditorMode() {\n        this.target.rawQuery = !this.target.rawQuery;\n    }\n\n    onChangeInternalCategory() {\n        if (this.target.category == this.clearSelection) {\n            this.target.category = this.prompts['category'];\n        }\n        // user has changed category, we should erase variable and other selections because they are\n        // not valid anymore\n        this.target.variable = this.prompts['variable'];\n        this.target.device = this.prompts['device'];\n        this.target.component = this.prompts['component'];\n        this.target.tagData = [];\n        // TODO: clear variable name when category changes. Only variable name field in the same target should change,\n        // variable name fields in other targets should not change\n        // FIXME: this does not look right, there must be a way to update element in the browser without manipulating it directly in DOM\n        // angular.element('#variable-field').children().children('a').html(this.target.variable);\n        // call refresh to force graph reload (which should turn blank since we dont have enough data\n        // to build valid query)\n        this.refresh();\n    }\n\n    onChangeInternalVariable() {\n        console.log('Variable has changed to ' + this.target.variable);\n        this.refresh();\n    }\n\n    onChangeInternalDevice() {\n        if(this.target.device == this.clearSelection) {\n            this.target.device = this.prompts['device'];\n        }\n        this.refresh();\n    }\n    onChangeInternalComponent() {\n        if(this.target.component == this.clearSelection) {\n            this.target.component = this.prompts['component'];\n        }\n        this.refresh();\n    }\n    \n    onChangeInternalTagFacet(index) {\n        // clear tag word when user changes tag facet. The dialog enters state where tag facet is selected\n        // but tag word is not. This state is invalid and should be transient, it does not make sense\n        // to call this.refresh() because query is yet incomplete\n        this.target.tagData[index].tagWord = this.blankDropDownElement;\n        // TODO: clear field \"tag word\" when \"tag facet\" changes. Only associated tag word should change,\n        // tag word fields in another tag matches in the same target or other targets should not change.\n        // FIXME: this does not look right, there must be a way to update element in the browser without manipulating it directly in DOM\n        // angular.element('#tag-word-'+index).children().children(\"a.tag-word\").html(this.target.tagData[index].tagWord);\n        this.refresh();\n    }\n\n    //noinspection JSUnusedLocalSymbols\n    onChangeInternalTagWord(index) {\n        this.refresh();\n    }\n\n    tagOperation(index, operation) {\n        this.target.tagData[index].tagOperation = operation;\n        this.refresh();\n    }\n\n    setSortByEl(sortOrder) {\n        this.target.sortByEl = sortOrder;\n        this.refresh();\n    }\n\n    setSelector(element) {\n        this.target.selector = element;\n        this.refresh();\n    }\n\n    setAggregator(element) {\n        this.target.aggregator = element;\n        this.refresh();\n    }\n\n    setAlias() {\n        this.refresh();\n    }\n\n    setFormat(element, elementDisplayStr) {\n        this.target.format = element;\n        this.target.formatDisplay = elementDisplayStr;\n        this.refresh();\n    }\n\n    setColumns() {\n        // console.log(this.target.columns);\n        this.refresh();\n    }\n\n    // setGroup() {\n    //     if (this.target.group == '') {\n    //         if(this.tempNew !== ''){\n    //             this.target.group = this.tempNew;\n    //         }\n    //         else {\n    //             this.target.group = 'select group';\n    //         }\n    //     }\n    //     this.refresh();\n    // }\n\n}\n\nNetSpyGlassDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}