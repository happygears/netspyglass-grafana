{"version":3,"sources":["../../src/services/api.js"],"names":["SQLBuilderFactory","QueryPrompts","sqlBuilder","SQLGenerator","categories","factory","select","distinct","from","where","category","orderBy","compile","facets","suggestion","type","tags","query","setDistinct","generateWhereFromTags","OP","NOT_NULL","result","forEach","tag","value","whereValue","condition","push","key","operator","length","unshift","generateSQLQuery","target","options","useTemplates","timeVar","time","BETWEEN","timeRange","to","columns","variable","AND","Cache","NSGQLApi","$backend","$q","_request","endpoints","test","then","response","status","title","message","targets","arguments","cacheKey","reloadCache","Array","isArray","generateTarget","hasOwnProperty","resolve","_","cloneDeep","data","nsgql","format","resource","method","token","$http","defaults","paramSerializer","access_token","datasourceRequest","url","baseUrl","headers","FORMAT_JSON","FORMAT_LIST"],"mappings":"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","file":"api.js","sourcesContent":["import SQLBuilderFactory from '../hg-sql-builder';\nimport {QueryPrompts} from '../dictionary';\nconst sqlBuilder = SQLBuilderFactory();\n\n/**\n * @typedef {{ token: string, baseUrl: string, endpoints: {test: string, data: string} }} INSGQLApiOptions\n */\n\nconst SQLGenerator = {\n    categories: function () {\n        return sqlBuilder.factory({\n            select: ['category', 'name'],\n            distinct: true,\n            from: 'variables',\n            where: ['AND', {\n                category: ['<>', '']\n            }],\n            orderBy: ['category']\n        }).compile();\n    },\n\n    /**\n     * @param from {string}\n     * @returns {*}\n     */\n    facets: function (from) {\n        return sqlBuilder.factory({\n            select: ['tagFacet'],\n            distinct: true,\n            from: from,\n            orderBy: ['tagFacet']\n        }).compile();\n    },\n\n    /**\n     * @param {string} type\n     * @param {string} from\n     * @param {array} tags\n     */\n    suggestion: function (type, from, tags = []) {\n        const query = sqlBuilder\n            .factory()\n            .setDistinct(true)\n            .from(from)\n            .select([type])\n            .orderBy([type]);\n\n        switch (type) {\n            case 'device':\n            case 'component':\n                query.where(this.generateWhereFromTags(tags));\n                break;\n            default:\n                query.where({\n                    [type]: [sqlBuilder.OP.NOT_NULL]\n                });\n                break;\n        }\n\n        return query.compile();\n    },\n\n    /**\n     * @param {array} tags\n     * @returns {array}\n     */\n    generateWhereFromTags: function(tags) {\n        let result = [];\n\n        tags.forEach((tag) => {\n            if (tag.value !== QueryPrompts.whereValue) {\n                if (tag.condition) {\n                    result.push(tag.condition);\n                }\n\n                result.push({\n                    [tag.key]:[tag.operator, tag.value]\n                });\n            }\n        });\n\n        if (result.length) {\n            result.unshift('AND');\n            return result;\n        }\n\n        return null;\n    },\n\n    generateSQLQuery: function (target, options, useTemplates = false) {\n        const query = sqlBuilder.factory();\n        const timeVar = useTemplates ? '$_timeFilter' : {\n                time: [sqlBuilder.OP.BETWEEN, options.timeRange.from, options.timeRange.to]\n            };\n\n        if (!target.columns || target.columns.length === 0) {\n            return false;\n        }\n\n        query.select(target.columns);\n        query.from(target.variable);\n        query.where([sqlBuilder.OP.AND,\n            this.generateWhereFromTags(target.tags),\n            timeVar\n        ]);\n\n        return query.compile();\n    }\n};\n\n\nconst Cache = {};\n\n\nclass NSGQLApi {\n    /**\n     * @param $backend\n     * @param $q\n     * @param options {INSGQLApiOptions}\n     */\n    constructor($backend, $q, options) {\n        this.$backend = $backend;\n        this.$q = $q;\n        this.options = options;\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    ping() {\n        return this\n            ._request(this.options.endpoints.test, {}, 'get')\n            .then((response) => {\n                if (response.status === 200) {\n                    return {\n                        title: 'Success',\n                        status: 'success',\n                        message: 'Data source is working'\n                    };\n                }\n            });\n    }\n\n    /**\n     * @param {Array|string} target - This param will be string that contain nsgql or array of targets with format {nsgql: 'select ..', format: 'list'}\n     * @param {string} format - Using only if first param is string. Specify format for nsgql query with single target\n     * @param {string} cacheKey - Use for caching requests by given key\n     * @param {boolean} reloadCache - Use for ignoring existing cache and get data from server. Then data will stored in cache.\n     * @return {Promise}\n     */\n    queryData() {\n        const targets = [];\n        const [ , , cacheKey = false, reloadCache = false] = arguments;\n\n        if (Array.isArray(arguments[0])) {\n            targets.push(...arguments[0]);\n        } else {\n            targets.push(this.generateTarget(arguments[0], arguments[1]));\n        }\n\n        if (cacheKey && Cache.hasOwnProperty(cacheKey) && !reloadCache) {\n            return this.$q.resolve(_.cloneDeep(Cache[cacheKey]));\n        }\n\n        return this._request(this.options.endpoints.data, {targets}, 'POST')\n            .then(function (response) {\n                if (response.status === 200) {\n                    const data = response.data || response;\n\n                    if (data && cacheKey) {\n                        Cache[cacheKey] = _.cloneDeep(data);\n                    }\n\n                    return data;\n                }\n            });\n    }\n\n    /**\n     * @param {string} nsgql\n     * @param {string} format\n     */\n    generateTarget(nsgql, format = 'json') {\n        return {\n            nsgql,\n            format\n        };\n    }\n\n    /**\n     * @description Makes actual API call to NetSpyGlass server\n     * @param {string} resource\n     * @param {object} data\n     * @param {string} method\n     */\n    _request(resource, data, method = 'POST') {\n        let query = '?';\n\n        if (this.options.token) {\n            query += this.$backend.$http.defaults.paramSerializer({access_token: this.options.token});\n        }\n\n        return this.$backend.datasourceRequest({\n            url: this.options.baseUrl + resource + query,\n            data: data,\n            method: method,\n            headers: {'Content-Type': 'application/json'}\n        });\n    }\n}\n\n\nNSGQLApi.FORMAT_JSON = 'json';\nNSGQLApi.FORMAT_LIST = 'list';\n\nexport {\n    SQLGenerator,\n    NSGQLApi\n}\n\n\n/*\n this.templateSrv = templateSrv;\n this.networkId = instanceSettings.jsonData.networkId || 1;\n this.accessToken = (instanceSettings.jsonData.useToken !== false && instanceSettings.jsonData.accessToken !== undefined && instanceSettings.jsonData.accessToken !== '') ? '?access_token=' + instanceSettings.jsonData.accessToken : '';\n this.endpointsBase = '/v2/query/net/' + this.networkId;\n this.endpoints = {};\n this.endpoints.category = this.endpointsBase + '/categories/' + this.accessToken;\n this.endpoints.variable = this.endpointsBase + '/variables/';\n this.endpoints.query = this.endpointsBase + '/data/' + this.accessToken;\n this.endpoints.test = '/v2/ping/net/' + this.networkId + \"/test/\" + this.accessToken;\n this.clearString = '-- clear selection --';\n */\n    \n    "]}