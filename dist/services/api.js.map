{"version":3,"sources":["../../src/services/api.js"],"names":["SQLBuilderFactory","sqlBuilder","SQLGenerator","categories","factory","select","distinct","from","where","category","orderBy","compile","facets","suggestion","type","query","setDistinct","console","log","generateSQLQuery","target","options","columns","length","split","variable","time","OP","BETWEEN","timeRange","to","Cache","NSGQLApi","$backend","$q","_request","endpoints","test","then","response","status","title","message","targets","cacheKey","arguments","Array","isArray","push","generateTarget","hasOwnProperty","resolve","_","cloneDeep","data","nsgql","format","resource","method","token","$http","defaults","paramSerializer","access_token","datasourceRequest","url","baseUrl","headers","FORMAT_JSON","FORMAT_LIST"],"mappings":"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","file":"api.js","sourcesContent":["import SQLBuilderFactory from '../hg-sql-builder';\nconst sqlBuilder = SQLBuilderFactory();\n\n/**\n * @typedef {{ token: string, baseUrl: string, endpoints: {test: string, data: string} }} INSGQLApiOptions\n */\n\nconst SQLGenerator = {\n    categories: function () {\n        return sqlBuilder.factory({\n            select: ['category', 'name'],\n            distinct: true,\n            from: 'variables',\n            where: ['AND', {\n                category: ['<>', '']\n            }],\n            orderBy: ['category']\n        }).compile();\n    },\n\n    /**\n     * @param from {string}\n     * @returns {*}\n     */\n    facets: function (from) {\n        return sqlBuilder.factory({\n            select: ['tagFacet'],\n            distinct: true,\n            from: from,\n            orderBy: ['tagFacet']\n        }).compile();\n    },\n\n    /**\n     * @param {string} type\n     * @param {string} from\n     */\n    suggestion: function (type, from) {\n        const query = sqlBuilder\n            .factory()\n            .setDistinct(true)\n            .from(from);\n\n        switch (type) {\n            case 'device':\n            case 'component':\n                query.select([type]);\n                query.orderBy([type]);\n            break;\n        }\n\n        console.log(query.compile());\n    },\n\n    generateSQLQuery: function (target, options) {\n        const query = sqlBuilder.factory();\n\n        if (!target.columns || target.columns.length === 0) {\n            return false;\n        }\n\n        query.select(target.columns.split(','));\n        query.from(target.variable);\n        query.where({\n            time: [sqlBuilder.OP.BETWEEN, options.timeRange.from, options.timeRange.to]\n        });\n\n        return query.compile();\n    }\n};\n\n\nconst Cache = {};\n\n\nclass NSGQLApi {\n\n\n    /**\n     * @param $backend\n     * @param $q\n     * @param options {INSGQLApiOptions}\n     */\n    constructor($backend, $q, options) {\n        this.$backend = $backend;\n        this.$q = $q;\n        this.options = options;\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    ping() {\n        return this\n            ._request(this.options.endpoints.test, {}, 'get')\n            .then((response) => {\n                if (response.status === 200) {\n                    return {\n                        title: 'Success',\n                        status: 'success',\n                        message: 'Data source is working'\n                    };\n                }\n            });\n    }\n\n    queryData() {\n        const targets = [];\n        const cacheKey = arguments[2] || false;\n\n\n        if (Array.isArray(arguments[0])) {\n            targets.push(...arguments[0]);\n        } else {\n            targets.push(this.generateTarget(arguments[0], arguments[1]));\n        }\n\n        if (cacheKey && Cache.hasOwnProperty(cacheKey)) {\n            console.log('Get data from: ' + cacheKey);\n            return this.$q.resolve(_.cloneDeep(Cache[cacheKey]));\n        }\n\n        return this._request(this.options.endpoints.data, {targets}, 'POST', arguments[3])\n            .then(function (response) {\n                if (response.status === 200) {\n                    const data = response.data || response;\n\n                    if (data && cacheKey) {\n                        Cache[cacheKey] = _.cloneDeep(data);\n                    }\n\n                    return data;\n                }\n            });\n    }\n\n    /**\n     * @param {string} nsgql\n     * @param {string} format\n     */\n    generateTarget(nsgql, format = 'json') {\n        return {\n            nsgql,\n            format\n        };\n    }\n\n    /**\n     * @description Makes actual API call to NetSpyGlass server\n     * @param {string} resource\n     * @param {object} data\n     * @param {string} method\n     */\n    _request(resource, data, method = 'POST') {\n        let query = '?';\n\n        if (this.options.token) {\n            query += this.$backend.$http.defaults.paramSerializer({access_token: this.options.token});\n        }\n\n        return this.$backend.datasourceRequest({\n            url: this.options.baseUrl + resource + query,\n            data: data,\n            method: method,\n            headers: {'Content-Type': 'application/json'}\n        });\n    }\n}\n\n\nNSGQLApi.FORMAT_JSON = 'json';\nNSGQLApi.FORMAT_LIST = 'list';\n\nexport {\n    SQLGenerator,\n    NSGQLApi\n}\n\n\n/*\n this.templateSrv = templateSrv;\n this.networkId = instanceSettings.jsonData.networkId || 1;\n this.accessToken = (instanceSettings.jsonData.useToken !== false && instanceSettings.jsonData.accessToken !== undefined && instanceSettings.jsonData.accessToken !== '') ? '?access_token=' + instanceSettings.jsonData.accessToken : '';\n this.endpointsBase = '/v2/query/net/' + this.networkId;\n this.endpoints = {};\n this.endpoints.category = this.endpointsBase + '/categories/' + this.accessToken;\n this.endpoints.variable = this.endpointsBase + '/variables/';\n this.endpoints.query = this.endpointsBase + '/data/' + this.accessToken;\n this.endpoints.test = '/v2/ping/net/' + this.networkId + \"/test/\" + this.accessToken;\n this.clearString = '-- clear selection --';\n */\n    \n    "]}