import { DataSourceJsonData } from '@grafana/data';
import { DataQuery } from '@grafana/schema';
import { Operators } from 'services/nsgql';

export interface ZSQuery extends DataQuery {
  refId: string;
  _nsgTarget?: ZSTarget;
}

/**
 * These are options configured for each DataSource instance
 */
export interface ZSDataSourceOptions extends DataSourceJsonData {
  networkId?: number;
  useToken?: boolean;
  accessToken?: string;
  addTokenToHeader?: boolean;
}

/**
 * Value that is used in the backend, but never sent over HTTP to the frontend
 */
export interface ZSSecureJsonData {
  apiKey?: string;
}

export interface ZSTarget {
  type: string; // 'nsgql'
  columns: ZSTargetColumn[];
  tags: ZSTargetTag[];
  variable: string;
  disableAdHoc?: boolean;
  isMultiColumnMode?: boolean;
  limit?: number;
  rawQuery?: number;
  isSeparatedColumns?: boolean;
  nsgqlString?: string;
  format: string; // 'time_series' | 'table'
  alias: string;
  groupBy: {
    type: 'time' | 'column' | string;
    value: string;
  };
  orderBy: {
    column?: {
      name: string;
      value: string;
      alias?: string;
    };
    sort: 'ASC' | 'DESC';
    colName: string;
    colValue: string;
  };
}
export interface ZSTargetColumn {
  id: string; // autogenerated and re-generated every time
  name: string;
  visible?: boolean;
  alias?: string;
  appliedFunctions?: Array<{ name: string }>;
}
export interface ZSTargetTag {
  key: string;
  value: string | string[];
  operator: Operators | '=~' | '!~';
  condition: string;
}
